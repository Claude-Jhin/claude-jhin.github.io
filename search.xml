<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>欢迎来到Claude的个人博客</title>
    <url>/2022/03/23/%E7%AC%AC%E4%B8%80%E7%AF%87%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<ul>
<li>Claude是谁？</li>
</ul>
<p>Claude是一名潜心游戏研发的开发者，致力于研究游戏开发中的种种技术，包括编程、渲染、动画、玩法等等。<br />
目前在做虚幻引擎的学习和研究，希望有一天能够引导做出自己的3A大作。</p>
<p>更多信息，可以点击右侧 <code>关于</code></p>
<ul>
<li>为什么要建立自己的博客网站呢？</li>
</ul>
<p>主要是希望能够通过这样一种方式作为自身能力的展示。作为游戏开发流水线中的程序一角，与策划和美术不同的是，程序除了游戏作品以外，很难拿出能够显示自身实力的东西，类似美术工作者的作品集和策划工作者的设定文案之类的。</p>
<p>所以自己这才想到去建立这样一个博客网站，一方面记录自己在游戏开发之路上所积累的技术点滴，另一方面也想要把一些东西共享出来。</p>
<p>此前自己已经在csdn和知乎上进行了一定量的博客文章撰写，但是考虑到有一些私人的东西希望自己管理，遂花了一些时间研究前端的内容，并且就一个方案（hexo框架）来实际落地自己的想法。</p>
<p>这第一篇文章，就把自己此时完成建站时的所思所想，记录下来。</p>
]]></content>
  </entry>
  <entry>
    <title>虚幻的细节</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E7%9A%84%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<p>怎样才能说明你学会了某样东西呢？</p>
<p>通读了文档？学习了某篇超长的教程？还是成功做出了某个效果？</p>
<p>虚幻的官方文档篇幅甚巨，如果静下心来通读的话估计也就需要几周的时间；<br />
使用虚幻引擎的教程现在也非常多，其中时长最长者看完也不过几天。</p>
<p>就以虚幻引擎为例，现在基本大家都知道虚幻的lumen，nanite，更深入一点的像GameFeature，世界划分等。<br />
这些信息可以从很多来源获取到，比如我们去读某篇博主的文章，可能会介绍到ue5引入了lumen，它在提供全局光照支持方面提供了多少的便捷，<br />
但是真正这其中的细节有多少呢？我们仅仅需要知道的是引擎内lumen的勾选框在哪个位置吗？</p>
<p>笔者的观点是，我们对某项东西水平的高低，不在于泛泛而谈其功能，而是看所掌握的细节之多少。<br />
了解lumen能够做到什么只是第一步，了解其局限性，了解lumen如何与其他模块（如nanite）协作，等等，才能够让我们对其看得更加透彻，这样才能更加灵活得使用，甚至更进一步，自己去更具需要进行修改和调整。</p>
<p>这也是本篇文章的出发点。本文主要记录在使用虚幻引擎时所遇到、想到的细节。<br />
在文章的初期，内容会比较零散，在渐入佳境后，获得一定的积累量后，博主会尝试对已有内容进行重新组织和分类，使内容更具阅读性。</p>
<span id="more"></span>
<ol>
<li>构造脚本<code>Construction Script</code>的调用时机</li>
</ol>
<p>构造脚本入口节点被包含在构造脚本函数图表中，当把一个Actor添加到关卡中或当一个现有Actor在关卡中发生变化（移动，重新Compile时）会执行该事件。</p>
<ol start="2">
<li>宏<code>check(...)</code></li>
</ol>
<p>如PlayerController里：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">check</span>(PlayerInput);</span><br></pre></td></tr></table></figure>
<p>其定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> check(expr)				UE_CHECK_IMPL(expr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Technically we could use just the _F version (lambda-based) for asserts</span></span><br><span class="line"><span class="comment">// both with and without formatted messages. However MSVC emits extra</span></span><br><span class="line"><span class="comment">// unnecessary instructions when using a lambda; hence the Exec() impl.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UE_CHECK_IMPL(expr) \</span></span><br><span class="line"><span class="meta">    &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span>(UNLIKELY(!(expr))) \</span></span><br><span class="line"><span class="meta">        &#123; \</span></span><br><span class="line"><span class="meta">            struct Impl \</span></span><br><span class="line"><span class="meta">            &#123; \</span></span><br><span class="line"><span class="meta">                static void FORCENOINLINE UE_DEBUG_SECTION ExecCheckImplInternal() \</span></span><br><span class="line"><span class="meta">                &#123; \</span></span><br><span class="line"><span class="meta">                    FDebug::CheckVerifyFailedImpl(#expr, __FILE__, __LINE__, PLATFORM_RETURN_ADDRESS(), TEXT(<span class="string">&quot;&quot;</span>)); \</span></span><br><span class="line"><span class="meta">                &#125; \</span></span><br><span class="line"><span class="meta">            &#125;; \</span></span><br><span class="line"><span class="meta">            Impl::ExecCheckImplInternal(); \</span></span><br><span class="line"><span class="meta">            PLATFORM_BREAK(); \</span></span><br><span class="line"><span class="meta">            CA_ASSUME(false); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNLIKELY(x)			(!!(x))</span></span><br></pre></td></tr></table></figure>
<p>即如果expr为false，则会去执行内定的检查，并且停止执行程序。</p>
<p>参考：<a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/ProgrammingWithCPP/Assertions/">虚幻 4.26 Documentation - Assertions</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>ue5</tag>
      </tags>
  </entry>
  <entry>
    <title>ActionRPG中的Gameplay Ability System拆解（更新中）</title>
    <url>/2022/04/07/ActionRPG%E4%B8%AD%E7%9A%84Gameplay-Ability-System%E6%8B%86%E8%A7%A3/</url>
    <content><![CDATA[<p>本文是对虚幻官方Gameplay Ability System（GAS）的示例项目ActionRPG的详细代码向拆解，<br />
将会涵盖GAS在代码和蓝图方面的各项配置和应用，旨在通过分析GAS的各种细节而掌握GAS的用法，<br />
为未来的游戏项目做准备。</p>
<p>关于方法，我希望是以工匠的态度，细致入微得深入代码的骨髓中，<br />
具体做法就是逐代码得阅读和分析，可能会加入一定量GAS以外的内容，所以本文的内容可能会非常庞大。<br />
我并不想在文章体量上做任何妥协，<br />
因为本文除了作为这次的研究学习成果外，<br />
也希望能作为未来一段时间使用GAS及虚幻引擎内其他与之相关的内容的参考文档。</p>
<span id="more"></span>
<h2 id="代码分析"><a class="markdownIt-Anchor" href="#代码分析"></a> 代码分析</h2>
<h3 id="actionrpg"><a class="markdownIt-Anchor" href="#actionrpg"></a> ActionRPG</h3>
<p><code>ActionRPG.h</code>头文件会被项目中的所有头文件所包含，所以如果有什么所有类都需要用到的东西的话，<br />
放在这里是最合适的。</p>
<p>其内包含了两个重要的头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EngineMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Engine/Engine.h&quot;</span></span></span><br></pre></td></tr></table></figure>
<p><code>EngineMinimal.h</code>中是一系列重要头文件的包含，截取一些我们常用的列举如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UObject core</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreUObject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Actor based classes</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Character.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Controller.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/PlayerController.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/GameModeBase.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ActorComponent based classes</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/ActorComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/SceneComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/StaticMeshComponent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Components/InputComponent.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Other</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Engine/World.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Engine/StaticMesh.h&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>正如其命名，它是我们开发游戏时所需要用到的模块的一个最小（minimal）集合。<br />
与之相对的，<code>Engine.h</code>是一个更加大而且全的包含，内容量大概是<code>EngineMinimal.h</code>的三倍之多，<br />
所以相对应的，如果是包含<code>Engine.h</code>会直接包含更多的模块，但是相应的编译速度也会大大减慢。</p>
<p>接下来<code>ActionRPG.h</code>内还做了一个事情就是声明并且定义全局的Log Category，<br />
Category会在Log中体现出来，以便在茫茫Log中更容易区分其作用或所属模块。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DECLARE_LOG_CATEGORY_EXTERN</span>(LogActionRPG, Log, All);</span><br></pre></td></tr></table></figure>
<p>对应在在<code>ActionRPG.cpp</code>中有其定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DEFINE_LOG_CATEGORY</span>(LogActionRPG);</span><br></pre></td></tr></table></figure>
<p>两者成对存在，这样在包含该头文件的文件中就可以使用<code>UE_LOG(LogTemp, Warning, TEXT(&quot;Your message&quot;));</code>来进行日志的打印。</p>
<p>此外，在<code>ActionRPG.cpp</code>中还进行了一个工作，即<code>IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, ActionRPG, &quot;ActionRPG2022&quot; );</code>，<br />
是对本模块进行注册，并指定为主模块，UBT（UnrealBuildTool）会将其编译为对应的模块。</p>
]]></content>
      <categories>
        <category>虚幻</category>
        <category>GAS</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>C++</tag>
        <tag>GAS</tag>
        <tag>Gameplay</tag>
      </tags>
  </entry>
  <entry>
    <title>bat批处理笔记</title>
    <url>/2022/08/27/bat%E6%89%B9%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%89%B9%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8Fbat">什么是批处理程序（.bat）？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%BC%96%E8%BE%91bat">如何编辑<code>.bat</code>？</a></li>
<li><a href="#bat%E7%9A%84%E5%8A%9F%E7%94%A8"><code>.bat</code>的功用</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E7%9A%84bat%E6%96%87%E4%BB%B6">基本的<code>.bat</code>文件</a></li>
<li><a href="#%E5%91%BD%E4%BB%A4%E5%88%86%E7%B1%BB">命令分类</a>
<ul>
<li><a href="#%E5%86%85%E9%83%A8%E5%91%BD%E4%BB%A4">内部命令</a></li>
<li><a href="#%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4">外部命令</a></li>
</ul>
</li>
</ul>
</p>
<span id="more"></span>
<h1 id="批处理入门"><a class="markdownIt-Anchor" href="#批处理入门"></a> 批处理入门</h1>
<h2 id="什么是批处理程序bat"><a class="markdownIt-Anchor" href="#什么是批处理程序bat"></a> 什么是批处理程序（.bat）？</h2>
<p>Batch file programming是微软操作系统自带原生的开发语言，是不需要构建任何环境就可以执行的脚本。</p>
<p>Batch file（后续简称为<code>.bat</code>）批处理文件采用cmd.exe执行。</p>
<h2 id="如何编辑bat"><a class="markdownIt-Anchor" href="#如何编辑bat"></a> 如何编辑<code>.bat</code>？</h2>
<p>任意文本编辑工具（text工具，代码环境等）</p>
<h2 id="bat的功用"><a class="markdownIt-Anchor" href="#bat的功用"></a> <code>.bat</code>的功用</h2>
<p>使用一系列内置命令进行自动化操作</p>
<ul>
<li>匹配规则删除文件</li>
<li>新建文件、日志等</li>
<li>批量创建计算机病毒</li>
</ul>
<h2 id="基本的bat文件"><a class="markdownIt-Anchor" href="#基本的bat文件"></a> 基本的<code>.bat</code>文件</h2>
<p>输出 hello world</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">Echo &quot;hello world&quot;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p><code>@echo off</code>会取消显示当前的盘符；<br />
<code>pause</code>则是在程序执行完成之后继续停留在命令行；</p>
<h2 id="命令分类"><a class="markdownIt-Anchor" href="#命令分类"></a> 命令分类</h2>
<h3 id="内部命令"><a class="markdownIt-Anchor" href="#内部命令"></a> 内部命令</h3>
<p>cls ipconfig等</p>
<h3 id="外部命令"><a class="markdownIt-Anchor" href="#外部命令"></a> 外部命令</h3>
<p>java，python等</p>
]]></content>
      <categories>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Http原理入门</title>
    <url>/2022/08/25/Http%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87">请求报文</a>
<ul>
<li><a href="#%E8%AF%B7%E6%B1%82%E8%A1%8Crequestline">请求行（requestline）</a></li>
<li><a href="#%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8header">请求头部（header）</a></li>
<li><a href="#%E7%A9%BA%E8%A1%8C">空行</a></li>
<li><a href="#%E8%AF%B7%E6%B1%82%E4%BD%93">请求体</a></li>
</ul>
</li>
<li><a href="#%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87">响应报文</a>
<ul>
<li><a href="#%E7%8A%B6%E6%80%81%E8%A1%8C">状态行</a></li>
</ul>
</li>
<li><a href="#%E5%93%8D%E5%BA%94%E5%A4%B4%E9%83%A8">响应头部</a></li>
<li><a href="#%E7%A9%BA%E8%A1%8C-2">空行</a></li>
<li><a href="#%E5%93%8D%E5%BA%94%E4%BD%93">响应体</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="http服务器用途"><a class="markdownIt-Anchor" href="#http服务器用途"></a> Http服务器用途</h1>
<ul>
<li>用于Web服务器访问网站</li>
<li>上传，下载</li>
<li>注册，登录，数据请求交互操作</li>
<li>服务器GM封号，限制登录，发放道具，后台充值</li>
<li>其他企业级应用的数据获取</li>
</ul>
<h1 id="http工作原理"><a class="markdownIt-Anchor" href="#http工作原理"></a> Http工作原理</h1>
<p>Http协议采用请求/响应模型——客户端向服务器发送请求报文，服务器以一个状态作为响应。</p>
<p>客户端和服务器进行一次交互的过程主要可以拆解为一下5步：</p>
<ol>
<li>客户端连接到Http服务器：Http客户端与Web服务器建立一个TCP连接</li>
<li>客户端向服务器发起Http请求：客户端通过已建立的TCP连接向服务器发送一个请求报文</li>
<li>服务器受到Http请求，并返回Http响应：服务器解析请求，定位请求资源，服务器将资源副本写道TCP连接，由客户端进行读取</li>
<li>释放TCP连接：若connection模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接；若connection模式为keep-alive，则该连接会保持一段时间，在该时间内可以继续接收请求</li>
<li>客户端浏览器解析html内容：客户端将服务器响应的信息进行解析</li>
</ol>
<h1 id="url"><a class="markdownIt-Anchor" href="#url"></a> URL</h1>
<p>何为URL？URL全拼Uniform Resource Locator，即统一资源定位符，我们俗称的网址一般就是指它。</p>
<p>组成：</p>
<ul>
<li>传送协议、层级URL标记符号（“//”）</li>
<li>传送资源需要的凭证信息（可省略）</li>
<li>服务器（通常为域名，有时为IP地址）</li>
<li>端口号（以数字方式表示，若为Http的默认值“：80”可省略）</li>
<li>路径（以“/”区分路径中的各级目录）</li>
<li>查询（GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突）</li>
</ul>
<p>在浏览器内键入某个URL，其内部一般具体会有以下的流程：</p>
<ol>
<li>浏览器向DNS服务器请求解析该URL中的域名所对应的IP地址</li>
<li>之后，根据IP地址和默认端口80，和服务器建立TCP连接</li>
<li>浏览器发送出读取文件的Http请求</li>
<li>服务器对浏览器请求做出响应，将对应的请求数据发送给浏览器</li>
<li>释放TCP连接</li>
<li>浏览器将对应数据进行显示</li>
</ol>
<h1 id="报文"><a class="markdownIt-Anchor" href="#报文"></a> 报文</h1>
<h2 id="请求报文"><a class="markdownIt-Anchor" href="#请求报文"></a> 请求报文</h2>
<p>请求报文的结构：</p>
<p><img src="Http%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8/Http_%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.jpg" alt="" /></p>
<h3 id="请求行requestline"><a class="markdownIt-Anchor" href="#请求行requestline"></a> 请求行（requestline）</h3>
<ul>
<li>请求方法</li>
</ul>
<p><code>GET</code>方法主要用于查询和下载，参数直接显示在地址栏中，不适合传递私密数据，也不适合传递大量数据；<br />
<code>POST</code>方法常用于游戏行业，将数据封装在请求数据中，对数据量没有限制，不会显示在地址栏中；<br />
<code>PUT</code>方法主要用于上传，将资源存放到指定位置，与<code>POST</code>的区别主要体现在是否指定存放位置（<code>POST</code>是服务器自己决定位置）；<br />
<code>HEAD</code><br />
<code>DELETE</code><br />
<code>OPTIONS</code><br />
<code>TRACE</code><br />
<code>CONNECT</code></p>
<ul>
<li>请求URL（不包括域名）</li>
<li>HTTP协议版本</li>
</ul>
<figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">POST /user HTTP/1.1 \r\n</span><br></pre></td></tr></table></figure>
<h3 id="请求头部header"><a class="markdownIt-Anchor" href="#请求头部header"></a> 请求头部（header）</h3>
<ul>
<li>Content-Type</li>
</ul>
<figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">HOST</span><span class="punctuation">: </span>www.user.com \r\n</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json \r\n</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>11 \r\n</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive \r\n</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0. \r\n</span><br></pre></td></tr></table></figure>
<h3 id="空行"><a class="markdownIt-Anchor" href="#空行"></a> 空行</h3>
<figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">\r\n</span><br></pre></td></tr></table></figure>
<h3 id="请求体"><a class="markdownIt-Anchor" href="#请求体"></a> 请求体</h3>
<p>待发送的数据</p>
<figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">name=world</span><br></pre></td></tr></table></figure>
<h2 id="响应报文"><a class="markdownIt-Anchor" href="#响应报文"></a> 响应报文</h2>
<h3 id="状态行"><a class="markdownIt-Anchor" href="#状态行"></a> 状态行</h3>
<ul>
<li>状态码</li>
</ul>
<h2 id="响应头部"><a class="markdownIt-Anchor" href="#响应头部"></a> 响应头部</h2>
<h2 id="空行-2"><a class="markdownIt-Anchor" href="#空行-2"></a> 空行</h2>
<h2 id="响应体"><a class="markdownIt-Anchor" href="#响应体"></a> 响应体</h2>
<p>请求报文的实体举例：</p>
<p><img src="Http%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8/Http_%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%A4%BA%E4%BE%8B.jpg" alt="" /></p>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Http</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻插件之Gameplay Ability System</title>
    <url>/2022/05/05/%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BGameplay-Ability-System/</url>
    <content><![CDATA[<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="https://docs.unrealengine.com/5.0/en-US/gameplay-ability-system-for-unreal-engine/">虚幻 5.0 Documentation - Gameplay Ability System</a></p>
<p><a href="https://github.com/tranek/GASDocumentation">Github tranek 的仓库 - GASDocumentation</a></p>
<p><a href="https://vorixo.github.io/devtricks/gas/">Devtricks -  Unreal Engine 5 - The truth of the Gameplay Ability System</a></p>
<p><a href="https://www.bilibili.com/video/BV1X5411V7jh">b站 虚幻引擎官方 - 第31期｜GAS插件介绍（入门篇）</a></p>
<p><a href="https://www.bilibili.com/video/BV1Wy4y1j7RB">b站 虚幻引擎官方 - A Guided Tour of Gameplay Abilities</a></p>
<p>[UnrealOpenDay2020]深入GAS架构设计 | EpicGames 大钊 <a href="https://www.bilibili.com/video/BV1zD4y1X77M">https://www.bilibili.com/video/BV1zD4y1X77M</a></p>
<p>动作RPG：Gameplay Abilities System <a href="https://www.bilibili.com/video/BV1Ub411S71W">https://www.bilibili.com/video/BV1Ub411S71W</a></p>
<p>[真实字幕组]Action RPG Gameplay Abilities System <a href="https://www.bilibili.com/video/BV18J411M7jg">https://www.bilibili.com/video/BV18J411M7jg</a></p>
<p>[FestEurope2019]使用游戏玩法技能系统 | Using the Gameplay Ability System(官方汉化) <a href="https://www.bilibili.com/video/BV1gJ411J7AM">https://www.bilibili.com/video/BV1gJ411J7AM</a></p>
<p>[UnrealFestOnline2020]Gameplay Abilities Framework的优缺点(官方字幕) <a href="https://www.bilibili.com/video/BV1Y54y1e7VJ">https://www.bilibili.com/video/BV1Y54y1e7VJ</a></p>
<p><a href="https://www.bilibili.com/video/BV1vB4y1w7q6">https://www.bilibili.com/video/BV1vB4y1w7q6</a></p>
<p><a href="https://blog.csdn.net/pirate310/article/details/106311256">https://blog.csdn.net/pirate310/article/details/106311256</a></p>
<p><a href="https://www.cnblogs.com/JackSamuel/p/7155500.html">https://www.cnblogs.com/JackSamuel/p/7155500.html</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
        <category>GAS</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>C++</tag>
        <tag>GAS</tag>
        <tag>Gameplay</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之Level Streaming和World Composition</title>
    <url>/2022/05/05/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BLevel-Streaming%E5%92%8CWorld-Composition/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>再读《C++ Primer》（更新中）</title>
    <url>/2022/04/29/%E5%86%8D%E8%AF%BBC-Primer/</url>
    <content><![CDATA[<p>我的程序学习之路是自大学就开始了，但是真正第一次拜读《C++ Primer》这部公认的必读书籍却是从研究生阶段才开始的，当时我身在法国，从网上找了一本像模像样的电子版就开始了阅读学习。</p>
<p>其实第一次读完（其实也并没有读完，只是将学业要求内的知识点相关看完了），并没有感到什么所谓脱胎换骨的感觉，其中的很多知识点我从前就接触过，而一些新的细节的地方当时也没有仔细去做记录和研究，所以当时心中也并没有像其他读者那样将之封为神作。当然这段读书经历还是在很长一段时间作为了我自我炫耀的其中一项谈资，因为毕竟是耐着性子读完了一本七八百页的理论书，现在想想有这种炫耀的想法也说明了自己的不成熟。</p>
<p>但是随着学业和工作的不断深入，我愈发得感觉到自己对于某些内容、对于人生和学习等，产生了一些不同的理解，关于类，关于内存，关于对细节的执着，关于读书的习惯。我发觉这本书给我的影响比想象中要大的多。</p>
<p>彼时我使用C<ins>仅限于对图形图像的研究学习，同时，还学习了Python以及更多的，使用C#进行Unity相关内容的开发。此刻，我也在虚幻研究中探索了一段时间，虚幻引擎内对C</ins>的使用使我对这门语言又产生了一些不一样的理解。我觉得是时候了，去再翻开这本书，将初时阅读未竟的遗憾完成，也希望这个自己能够再次借着这本书，产生某种蜕变。</p>
<span id="more"></span>
<p><ul class="markdownIt-TOC">
<li><a href="#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BC%80%E5%A7%8B">第一章 开始</a>
<ul>
<li><a href="#11-%E7%AE%80%E5%8D%95%E7%9A%84c%E7%A8%8B%E5%BA%8F">1.1 简单的C++程序</a></li>
<li><a href="#12-%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA">1.2 输入和输出</a></li>
<li><a href="#13-%E6%B3%A8%E9%87%8Acomments">1.3 注释（comments）</a></li>
<li><a href="#14-%E6%8E%A7%E5%88%B6%E6%B5%81">1.4 控制流</a><br />
*
<ul>
<li><a href="#while%E8%AF%AD%E5%8F%A5">while语句</a></li>
<li><a href="#for%E8%AF%AD%E5%8F%A5">for语句</a></li>
<li><a href="#%E5%BE%AA%E7%8E%AF%E8%AF%BB%E5%8F%96%E8%BE%93%E5%85%A5">循环读取输入</a></li>
<li><a href="#if%E8%AF%AD%E5%8F%A5">if语句</a></li>
</ul>
</li>
<li><a href="#15-%E7%B1%BB">1.5 类</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">第二章 变量和基本类型</a>
<ul>
<li><a href="#21-%E5%9F%BA%E6%9C%AC%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B">2.1 基本内置类型</a><br />
*
<ul>
<li><a href="#%E7%AE%97%E6%95%B0%E7%B1%BB%E5%9E%8B">算数类型</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">类型转换</a></li>
<li><a href="#%E5%AD%97%E9%9D%A2%E5%80%BC%E5%B8%B8%E9%87%8F">字面值常量</a></li>
</ul>
</li>
<li><a href="#22-%E5%8F%98%E9%87%8F">2.2 变量</a><br />
*
<ul>
<li><a href="#%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89">变量的定义</a></li>
<li><a href="#%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E">变量的声明</a></li>
</ul>
</li>
<li><a href="#23-%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B">2.3 复合类型</a><br />
*
<ul>
<li><a href="#%E5%BC%95%E7%94%A8">引用</a></li>
<li><a href="#%E6%8C%87%E9%92%88">指针</a></li>
<li><a href="#%E7%BB%BC%E5%90%88%E7%90%86%E8%A7%A3%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8">综合理解指针和引用</a></li>
</ul>
</li>
<li><a href="#24-const%E9%99%90%E5%AE%9A%E7%AC%A6">2.4 const限定符</a><br />
*
<ul>
<li><a href="#const%E5%92%8C%E5%BC%95%E7%94%A8">const和引用</a></li>
<li><a href="#const%E5%92%8C%E6%8C%87%E9%92%88">const和指针</a></li>
<li><a href="#%E9%A1%B6%E5%B1%82const">顶层const</a></li>
<li><a href="#constexpr%E5%92%8C%E5%B8%B8%E9%87%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F">constexpr和常量表达式</a></li>
</ul>
</li>
<li><a href="#25-%E5%A4%84%E7%90%86%E7%B1%BB%E5%9E%8B">2.5 处理类型</a><br />
*
<ul>
<li><a href="#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D">类型别名</a></li>
<li><a href="#auto%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E%E7%AC%A6">auto类型说明符</a></li>
<li><a href="#decltype%E7%B1%BB%E5%9E%8B%E6%8C%87%E7%A4%BA%E7%AC%A6">decltype类型指示符</a></li>
</ul>
</li>
<li><a href="#26-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">2.6 自定义数据结构</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84">第三章 字符串、向量和数组</a>
<ul>
<li><a href="#31-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84using%E5%A3%B0%E6%98%8E">3.1 命名空间的using声明</a></li>
<li><a href="#32-string">3.2 string</a><br />
*
<ul>
<li><a href="#%E5%AE%9A%E4%B9%89%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96">定义和初始化</a></li>
<li><a href="#string%E5%AF%B9%E8%B1%A1%E4%B8%8A%E7%9A%84%E6%93%8D%E4%BD%9C">string对象上的操作</a></li>
</ul>
</li>
<li><a href="#33-vector">3.3 vector</a></li>
<li><a href="#34-%E8%BF%AD%E4%BB%A3%E5%99%A8">3.4 迭代器</a></li>
<li><a href="#35-%E6%95%B0%E7%BB%84">3.5 数组</a><br />
*
<ul>
<li><a href="#%E5%AE%9A%E4%B9%89%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96-2">定义和初始化</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88">数组指针</a></li>
<li><a href="#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">多维数组</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%A1%A8%E8%BE%BE%E5%BC%8F">第四章 表达式</a>
<ul>
<li><a href="#41-%E5%9F%BA%E7%A1%80">4.1 基础</a></li>
</ul>
</li>
</ul>
</p>
<h2 id="第一章-开始"><a class="markdownIt-Anchor" href="#第一章-开始"></a> 第一章 开始</h2>
<h3 id="11-简单的c程序"><a class="markdownIt-Anchor" href="#11-简单的c程序"></a> 1.1 简单的C++程序</h3>
<p>函数（function）的四个部分：返回类型（return type），函数名（function name），形参列表（parameter list），函数体（function body）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回类型：int，函数名：main，形参列表：[空]，函数体：&#123;return 0;&#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类型（type），定义了数据元素（变量）的内容，同时定义了该类数据可以进行的运算。</p>
<h3 id="12-输入和输出"><a class="markdownIt-Anchor" href="#12-输入和输出"></a> 1.2 输入和输出</h3>
<p>iostream库提供IO机制。</p>
<ul>
<li>istream表示输入流，使用cin的istream类型对象作为标准输入（standard input），从所运行的窗口读入；</li>
<li>ostream表示输出流，使用cout的ostream类型对象作为标准输出（standard output），此外标准库还定义了cerr和clog两个ostream类型的对象，分别用来输出错误信息和日志信息；这些信息也都是通过正在运行的程序窗口进行输出。</li>
</ul>
<p>流的本质就是字符序列，表示对特定的设备（如计算机）进行读取或者写入。</p>
<p>简单的输入输出示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// 头文件引用，表明要使用iostream库</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 输出运算符（&lt;&lt;）左侧必须是一个ostream对象，右侧是要打印的值，</span></span><br><span class="line">	<span class="comment">// 表示将待打印的值写到给定的ostream对象cout上，用来在标准信息上打印消息</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 两个&lt;&lt;符号其实是链式编程思想的体现，</span></span><br><span class="line">	<span class="comment">// 即第一个运算符的结果成为第二个运算符的左侧对象，从而对输出请求进行连接</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 第二个要打印的是一个操纵符（manipulator）endl，</span></span><br><span class="line">	<span class="comment">// 意味着结束当前行，并把缓冲区（buffer）中的内容刷新到设备中</span></span><br><span class="line">	<span class="comment">// 刷新的操作可以保证产生的输出都真正写入到流中，避免输入停留在缓冲区，从而导致一些错误的判断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// std::用来表明对象的命名空间（namespace），</span></span><br><span class="line">	<span class="comment">// std为标准库定义的所有名字的命名空间，::为作用域运算符</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Enter two numbers:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	<span class="type">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输入运算符（&gt;&gt;）左侧必须是一个istream对象，表明从该对象读入数据，并存取到右侧对象上</span></span><br><span class="line">	std::cin &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印输出</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;The sum of &quot;</span> &lt;&lt; v1 &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; v2 &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; v1 + v2 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="13-注释comments"><a class="markdownIt-Anchor" href="#13-注释comments"></a> 1.3 注释（comments）</h3>
<p>程序会忽略注释（预处理器遇到注释会以空行替换），所以注释的作用是帮助代码的人类读者理解程序内容。</p>
<p>单行注释：以双斜线（//）开始，以换行符结束，其间所有内容都会被编译器所忽略，通常用于半行和单行附注；</p>
<p>界定符对注释（源自C语言）：以/<em>开始，以</em>/结束，通常用于多行解释。</p>
<p>简单用法示意如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 界定符对注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 单行注释</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Enter two numbers:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	<span class="type">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>; <span class="comment">// 半行注释（同样属于单行注释）</span></span><br><span class="line">	std::cin &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;The sum of &quot;</span> &lt;&lt; v1 &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; v2 &lt;&lt; <span class="string">&quot; is &quot;</span> &lt;&lt; v1 + v2 &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-控制流"><a class="markdownIt-Anchor" href="#14-控制流"></a> 1.4 控制流</h3>
<h5 id="while语句"><a class="markdownIt-Anchor" href="#while语句"></a> while语句</h5>
<p>反复执行一段代码（<em>statement</em>），直到给定条件（<em>condition</em>）为假。</p>
<p>形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>, i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 复合复制运算符（+=），将右侧的运算对象加到左侧运算对象上，将结果保存到左侧运算对象上</span></span><br><span class="line">		sum += i; <span class="comment">// 等价于 sum = sum + i</span></span><br><span class="line">		<span class="comment">// 后缀递增运算符（++），将运算对象的值增加1</span></span><br><span class="line">		i++；<span class="comment">// 等价于 i = i + 1</span></span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Sum of 1 to 10 inclusive is: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="for语句"><a class="markdownIt-Anchor" href="#for语句"></a> for语句</h5>
<p>是一种特定的针对变量递增（递减）的模式的循环语句，是对while的某种意义上的简化。</p>
<p>for语句的结构为循环头+循环体两部分。</p>
<p>循环头控制循环体的执行次数，它又更进一步由三部分组成：初始化语句（<em>init-statement</em>），循环条件（<em>condition</em>），以及表达式（<em>expression</em>）。</p>
<p>简化while中的示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>, i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//while (i &lt;= 10)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	sum += i;</span></span><br><span class="line">	<span class="comment">//	i++;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Sum of 1 to 10 inclusive is: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="循环读取输入"><a class="markdownIt-Anchor" href="#循环读取输入"></a> 循环读取输入</h5>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>, val = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 循环条件为std::cin &gt;&gt; val，本质上是判断对象cin是否为空，</span></span><br><span class="line">	<span class="comment">// 若输入错误，或遇到文件结束符（end-of——file，windows平台为Ctrl+Z），此时istream对象无效，从而结束循环</span></span><br><span class="line">	<span class="keyword">while</span> (std::cin &gt;&gt; val)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += val;</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Sum is: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="if语句"><a class="markdownIt-Anchor" href="#if语句"></a> if语句</h5>
<p>对某个条件进行求值。</p>
<p>统计数字出现次数的示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> currentVal = <span class="number">0</span>, val = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (std::cin &gt;&gt; currentVal)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (std::cin &gt;&gt; val)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 使用相等运算符（==）来判断符号两侧的值是否相等，这与赋值运算符（=）是完全不同的</span></span><br><span class="line">			<span class="keyword">if</span> (val == currentVal)</span><br><span class="line">			&#123;</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				std::cout &lt;&lt; currentVal &lt;&lt; <span class="string">&quot; occurs &quot;</span> &lt;&lt; count &lt;&lt; <span class="string">&quot; times&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">				currentVal = val;</span><br><span class="line">				count = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		std::cout &lt;&lt; currentVal &lt;&lt; <span class="string">&quot; occurs &quot;</span> &lt;&lt; count &lt;&lt; <span class="string">&quot; times&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="15-类"><a class="markdownIt-Anchor" href="#15-类"></a> 1.5 类</h3>
<p>类（class）定义了一种数据类型（设计目的与内置数据类型一样，如int，float等）的同时，还定义了与该类型相关联的一系列操作。</p>
<p>成员函数（member function）作为类的一部分而存在，有时候也称为是方法（method）。</p>
<p>成员函数通常是通过类的对象使用点运算符（.）来进行调用。点运算符的左侧是类类型的对象，右侧是该类型的一个成员名，运算结果是右侧对象的返回值。</p>
<p>而调用某个函数需要使用调用运算符（()），里面可以为空也可以放置实参列表（argument）。</p>
<h2 id="第二章-变量和基本类型"><a class="markdownIt-Anchor" href="#第二章-变量和基本类型"></a> 第二章 变量和基本类型</h2>
<p>数据类型是程序的基础：它告诉我们数据的意义以及我们能在数据上执行的操作。</p>
<p>对象的数据类型定义了能够利用对象存储的数据以及这些数据可以参与的运算。</p>
<h3 id="21-基本内置类型"><a class="markdownIt-Anchor" href="#21-基本内置类型"></a> 2.1 基本内置类型</h3>
<p>包括算数类型（arithmetic type）和空类型（void）。其中算数类型包含字符，整型数，布尔值和浮点数；而空类型经常作为不返回任何值的函数的返回类型。</p>
<h5 id="算数类型"><a class="markdownIt-Anchor" href="#算数类型"></a> 算数类型</h5>
<p>算数类型分为两类：整型和浮点型（字符和布尔类型本质上属于整型）。</p>
<p>计算机以比特（bit）序列存储数据，每个比特非0即1。 可寻址的最小内存块称为字节（byte)，存储的基本单元称为字（word）。这三个概念的大小依次为：1个字可能4或8个字节构成，1个字节可能由8比特构成。</p>
<p>计算机中的每个字节都与一个地址（address）关联（这也是为什么字节是最小的可寻址内存块）。而为了赋予内存中某个地址明确的含义，必须先知道存储在该地址的数据的类型，类型会决定数据所占的比特数以及该如何解释这些比特背后所代表的含义。</p>
<p>除去布尔型和扩展的字符型外，其他整型可以划分为带符号的（signed）和无符号的（unsigned）。带符号类型可以表示正数，负数还有0，无符号类型就只能表示大于等于0的值。一般的基本类型都是带符号的，将带符号的类型转换为不带符号的只需要在类型前面添加unsigned，如unsigned int， unsigned long等等。</p>
<h5 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h5>
<p>某种类型的对象一般都具备参与某种运算的能力，比如int，float等可以进行四则运算，bool可用于作为条件进行判断（这一点一些其他类型也同样具备），类类型能够支持更复杂的使用，等等。</p>
<p>那么这些类型是否具备某种通用的能力？大部分编程语言，以及其中大部分类型都支持的一种——类型转换（convert），将某种给定类型转换为另一种<strong>相关</strong>类型。这种能够可以看作是编译器为了减少程序开发负担而设计的一种智能效果。</p>
<p>类型转换的原则就是：</p>
<ul>
<li>当转换的结果会导致丢失信息时（一般来说占比特数大的类型比占比特数小的类型所能承载更多的信息），需要进行舍去，如浮点型转整型，需要抹掉小数点的信息；</li>
<li>当转换的结果会导致能够容纳额外的信息时，需要进行信息的补充，如整型转浮点型，需要补充小数点后的0以增加精度；</li>
</ul>
<p>具体的细则：</p>
<ul>
<li>当我们把一个非布尔类型的算数值赋给布尔类型时，初始值为0则结果为false，负责结果为true；</li>
<li>当我们把一个布尔值赋给整数类型时，初始值为false则结果为0，初始值为true则结果为1；</li>
<li>当我们把一个浮点数赋给整数类型时，进行近似处理。结果值将仅保留浮点数中小数点之前的部分；</li>
<li>当我们把一个整数值赋给浮点类型时，小数部分记为0、如果该整数所占的空间超过浮点类型的容量，精度可能会有损失；</li>
<li>当我们赋给无符号类型一个超过它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数；</li>
<li>当我们赋给带符号类型一个超过它表示范围的值时，结果是未定义的（undefined）。此时程序可能会继续工作，也可能会崩溃，还可能会产生垃圾数据。（编程中尽量减少无法预知的行为）</li>
</ul>
<p>最后，切勿混用带符号类型和无符号类型，除非你了解背后的转换且故意这么做。</p>
<h5 id="字面值常量"><a class="markdownIt-Anchor" href="#字面值常量"></a> 字面值常量</h5>
<p>字面值常量（literal）的形式和值决定了它所属的数据类型。</p>
<p>整型字面值的数据类型依据值和符号来决定：</p>
<ul>
<li>十进制整型字面值是带符号数，其具体类型应当取<strong>能够容纳该数</strong>的<strong>最小</strong>的类型（int，long，long long）；</li>
<li>八进制和十六进制字面值既可能是带符号也可能是无符号的，其具体类型应当取<strong>能够容纳该数</strong>的<strong>最小</strong>的类型（int，unsigned int，long，unsinged long，long long，unsigned long long）。</li>
</ul>
<p>如果与该字面值关联的最大的数据类型都无法将其放下（完整描述信息），那么将会产生错误。</p>
<p>浮点型字面值表现为一个小数或者以科学计数法表示的指数，其中指数部分用E或e标识：</p>
<ul>
<li>浮点型字面值默认是double；</li>
</ul>
<p>char型字面值是一个以单引号括起来的一个字符，如’a’</p>
<p>字符串型字面值是一个以双引号括起来的字符串（长度可以为0），如&quot;a&quot;，“Hello”。字符串的本质是常量字符组成的数组（array）。与我们看到的所不同的是，实际上每个字符串会被编译器默认加上一个空字符（’\0’）作为真正的结尾，所以字符串字面值的实际长度要比其内容多1。</p>
<p>有两类字符我们是不能直接使用的：不可打印（nonprintable）字符，如退格等没有可视的图符的字符；有特殊含义的字符，如单引号，双引号，问好，反斜线等。</p>
<p>应对上述字符时，就需要用到转义序列就，以反斜线开始，配以特定字符，从而整体上被当作一个字符来对待（正如其名，转义序列（escape sequence）的作用就将字符原先的含义抹除掉，并赋以新的意义）：</p>
<table>
<thead>
<tr>
<th>转义序列</th>
<th>用途</th>
<th>转义序列</th>
<th>用途</th>
<th>转义序列</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>\n</td>
<td>换行符</td>
<td>\t</td>
<td>横向制表符</td>
<td>\a</td>
<td>报警符</td>
</tr>
<tr>
<td>\v</td>
<td>纵向制表符</td>
<td>\b</td>
<td>退格符</td>
<td>&quot;</td>
<td>双引号</td>
</tr>
<tr>
<td>\</td>
<td>反斜线</td>
<td>?</td>
<td>问号</td>
<td>’</td>
<td>单引号</td>
</tr>
<tr>
<td>\r</td>
<td>回车符</td>
<td>\f</td>
<td>进纸符</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>此外，还可以通过指定前缀或后缀，改变整型、浮点型和字符型字面值的默认类型。</p>
<p>字符和字符串字面值前缀：</p>
<table>
<thead>
<tr>
<th>前缀</th>
<th>含义</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>Unicode 16字符</td>
<td>char16_t</td>
</tr>
<tr>
<td>U</td>
<td>Unicode 32字符</td>
<td>char32_t</td>
</tr>
<tr>
<td>L</td>
<td>宽字符</td>
<td>wchar_t</td>
</tr>
<tr>
<td>u8</td>
<td>UTF-8</td>
<td>char</td>
</tr>
</tbody>
</table>
<p>整型字面值后缀：</p>
<table>
<thead>
<tr>
<th>后缀</th>
<th>最小匹配类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>u or U</td>
<td>unsigned</td>
</tr>
<tr>
<td>l or L</td>
<td>long</td>
</tr>
<tr>
<td>ll or LL</td>
<td>long long</td>
</tr>
</tbody>
</table>
<p>浮点型字面值后缀：</p>
<table>
<thead>
<tr>
<th>后缀</th>
<th>最小匹配类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>f or F</td>
<td>float</td>
</tr>
<tr>
<td>l or L</td>
<td>long double</td>
</tr>
</tbody>
</table>
<p>布尔字面值有两个：true，false。</p>
<p>指针字面值有：nullptr。</p>
<h3 id="22-变量"><a class="markdownIt-Anchor" href="#22-变量"></a> 2.2 变量</h3>
<p>变量本身代表着可以通过一个名字来对一段内存进行访问和操作，而变量的类型则决定具体占用内存的大小，以及该变量能够参与的运算等等。</p>
<p>当我们提到“变量”（variable），或者“对象”（object），要知道本质上说的是同一回事，都是<strong>具有某种数据类型的内存空间</strong>。</p>
<h5 id="变量的定义"><a class="markdownIt-Anchor" href="#变量的定义"></a> 变量的定义</h5>
<p>变量的定义由两部分组成：类型说明符（type specifier），变量名。在定义的时候可以顺便为变量赋予初始值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[type specifier] [变量名];</span><br><span class="line">[type specifier] [变量名<span class="number">1</span>], [变量名<span class="number">2</span>];</span><br><span class="line">[type specifier] [变量名] = [初始值];</span><br></pre></td></tr></table></figure>
<p>这里注意，初始化（initialized）不等于赋值，初始化是创建变量时赋予其一个初始值；而赋值则是抹除对象的当前值，并用替换一个新的值。</p>
<p>除却用=进行初始化，还有其他一些初始化方法，如使用小括号（()），花括号（{}），其中花括号的用法被称为是列表初始化（list initialization）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>当然，即便我们不用上述任何的初始化方法，变量依然会执行一个默认初始化（default initialization）操作，而此时这个默认值会由该变量的类型所决定。</p>
<p>内置类型的变量在函数之外进行定义时，会被默认初始化为0；某些情况下，内置类型变量不会自动初始化，这时视图拷贝或者进行其他操作将会引发错误。所以书上会建议我们初始化每一个内置类型的变量，当然我们知道并不是对每一个变量这个操作都是必须的，但是出于安全性考虑，这样不失为一个编程的好习惯。、</p>
<h5 id="变量的声明"><a class="markdownIt-Anchor" href="#变量的声明"></a> 变量的声明</h5>
<p>如果要在多个文件里使用同一个变量，就必须将变量的定义和声明分离。这样做的原因也显而易见——声明（declaration）规定了变量的名字和类型，使得名字被程序所知，而定义（definition）负责创建与名字所关联的实体（赋予初始值），这个实体只能是唯一的一份（不能重复定义），但是申明却可以有多次。这种做法就引出了C++语言中的分离式编译（separate compilation）机制，将头文件（一般用来存放申明）和cpp文件（用来实现定义）分开。</p>
<p>extern关键字被用来作声明用，但是要注意不能去显示初始化，否则会抵消掉extern的申明作用，从而完全变成了定义。</p>
<p>当我们在程序中引用别的文件中的类型时，可以在程序最上面直接引用头文件来用，也可以使用前置申明，再在后面补充引用。</p>
<p>C++是静态类型（statically typed）的语言，即在编译阶段进行类型检查（type checking），从而检查数据类型是否支持其所有罗列的运算，如果其中存在不支持进行的运算，那么编译器就会直接报错显示编译不通过。</p>
<h3 id="23-复合类型"><a class="markdownIt-Anchor" href="#23-复合类型"></a> 2.3 复合类型</h3>
<p>复合类型（compound type）是基于其他类型之上而进行定义的类型，最常见的就是引用和指针。</p>
<p>这里将前面提到的声明语句进行一个更严谨的定义：<code>基本数据类型（base type）+声明符（declarator）列表</code>。</p>
<p>其中声明符命名了一个变量并指定该变量为与基本数据类型相关的某种类型。在前面的例子中，声明符就是变量名，而变量的类型就是声明的基本数据类型。当然还有其他更复杂的声明符，从而得到一些基于基本数据类型的更加复杂的类型，并将其指定给变量。</p>
<h5 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h5>
<p>引用（reference）是为对象起了一个别名，其行为是引用（refer to）。其定义形式为（其声明符为<code>&amp;[别名]</code>）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[数据类型] [变量名] = [值];</span><br><span class="line">[数据类型] &amp;[别名] = [变量名];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;rVal = val;</span><br></pre></td></tr></table></figure>
<p>引用本身并不是一个对象，必须初始化（进行绑定操作），且不能重新绑定（bind）另一个对象。</p>
<h5 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h5>
<p>指针（pointer）是用某种类型的指针对象存储该类型数据的地址，其行为是指向（point to）。其定义形式为（其声明符为<code>*[指针名]</code>）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[数据类型] [变量名] = [值];</span><br><span class="line">[数据类型] *[指针名];</span><br><span class="line">[数据类型] *[指针名] = &amp;[变量名];</span><br><span class="line">*[指针名];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> *p1 = &amp;val;</span><br><span class="line">*p1;</span><br></pre></td></tr></table></figure>
<p>其中，获取某个对象的地址需要用到取址符（&amp;）。访问指向的对象可以利用解引用符（*）（对于有效指针来说适用）。</p>
<p>与引用相同，指针也被用来简介访问某个对象。而与引用不同的是，指针本身就是一个对象，可以在定义时不进行初始化，也可以在指向某个对象后再改变指向。</p>
<p>指针的值会出于以下四个状态之一：</p>
<ul>
<li>指向某个对象</li>
<li>指向紧邻对象所占空间的下一个位置</li>
<li>空指针</li>
<li>无效指针</li>
</ul>
<p>其中空指针（null pointer）是指不指向任何对象的指针，可以用字面值nullptr或者0直接初始化指针从而生成空指针。空指针不属于无效指针。所以为了避免出现使用无效指针的情况出现，用声明空指针的形式来声明所有的指针（可以随后更改指针的指向是一个推荐的编程习惯。</p>
<h5 id="综合理解指针和引用"><a class="markdownIt-Anchor" href="#综合理解指针和引用"></a> 综合理解指针和引用</h5>
<p>这里再次强调<code>基本数据类型（base type）+声明符（declarator）列表</code>的提法，操作符*和操作符&amp;都是声明符的一部分，而不是基本数据类型的构成部分。</p>
<p>所以在同一行声明多个变量时，可以有以下的写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> val, *pVal, &amp;rVal = val;</span><br></pre></td></tr></table></figure>
<h3 id="24-const限定符"><a class="markdownIt-Anchor" href="#24-const限定符"></a> 2.4 const限定符</h3>
<p>利用关键字const可以对变量的类型加以限定，从而限制变量的值的发生改变的行为，这样，就把该变量定义为了一个常量，任何试图改变该值的行为都将引发错误。</p>
<p>因为const对象一旦创建其值就不能改变，所以const对象必须初始化，否则也将引发错误。</p>
<p>此外const也可以和extern联用，即在某个文件中进行定义，其他文件通过引用头文件及声明的方式进行使用。</p>
<h5 id="const和引用"><a class="markdownIt-Anchor" href="#const和引用"></a> const和引用</h5>
<p>即对常量的引用，这个引用不能被用作修改它所绑定的对象。</p>
<p>形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> [数据类型] [变量名] = [初始化值];</span><br><span class="line"><span class="type">const</span> [数据类型] &amp;[别名] = [变量名];</span><br></pre></td></tr></table></figure>
<p>此时，不能去修改变量的值，也就不能通过引用去修改相应的变量。</p>
<p>注意，不能用非常量引用去指向一个常量对象；但是相对的，可以用一个常量引用去指向一个非常量的对象，比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> &amp;ri = i;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;cri = i;</span><br></pre></td></tr></table></figure>
<p>此时，i的值我们知道是可以随意修改的，对const的引用却无法用来修改相应的绑定的值，所以这里的情况是，const限定了我们不能用cri来修改i的值，但是可以通过其他诸多方法来实现修改（比如直接对i进行赋值）。</p>
<p>前面我们提到，正常情况下，引用的类型必须和其所引用对象的类型一致。这一点当然没错，但是某些写法下，会令我们产生一些误解，比如说如下的写法也是正确的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r = dval;</span><br></pre></td></tr></table></figure>
<p>实际上，是编译器为我们做了中间的转换工作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> temp = dval;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;r = temp;</span><br></pre></td></tr></table></figure>
<p>这种情况下，编译器帮我们建立了一个临时量（temporary）对象。这个对象的本质是当编译器需要一个空间来暂存表达式的求值结果时创建的一个未命名的对象。</p>
<p>上面的例子中，把const拿掉是否也合法？实际测试结果是并不允许，C++并不允许把引用绑定到临时量上（上面的结果是常量引用绑定到一个临时量常量上，虽然这个说法并不严谨）。</p>
<h5 id="const和指针"><a class="markdownIt-Anchor" href="#const和指针"></a> const和指针</h5>
<p>常量指针和指针常量。</p>
<p>常量指针即指向常量的指针（pointer to const），不能用于改变其所指的对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> [数据类型] [变量名] = [初始化值];</span><br><span class="line"><span class="type">const</span> [数据类型] *[别名] = &amp;[变量名];</span><br></pre></td></tr></table></figure>
<p>同常量引用一样，常量指针更多的是限定不能通过该指针去修改指向的值，若是本身指向的对象存在其他修改方法的话，是不影响的。</p>
<p>指针常量即指针本身是一个常量（const pointer），意味着指针本身的指向不能发生改变（指针存储的内存地址被限定不能修改），所以是可以通过这个指针去修改指向的值的。</p>
<p>形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[数据类型] [变量名] = [初始化值];</span><br><span class="line">[数据类型] <span class="type">const</span> *[别名] = &amp;[变量名];</span><br></pre></td></tr></table></figure>
<p>这里也体现了指针和引用的区别：指针本身就是一个对象，所以才存在常量指针这种东西。</p>
<h5 id="顶层const"><a class="markdownIt-Anchor" href="#顶层const"></a> 顶层const</h5>
<p>上面指针的使用中，体现了对const的两种用法，我们称之为顶层const（top-level const）和底层const（low-level const）。顶层const意味着我们对任意数据类型的数据对象都能加以限制，成为常量，如指针常量的用法；而底层const实际上是对复合类型的基础类型加以限定，如常量指针。</p>
<h5 id="constexpr和常量表达式"><a class="markdownIt-Anchor" href="#constexpr和常量表达式"></a> constexpr和常量表达式</h5>
<p>常量表达式（const expression）是指值不会改变并且在编译过程中就能得到计算结果的表达式。需要运行时得到结果的表达式不是常量表达式。</p>
<p>显著的两个要素是：const数据类型，以及初始值（比如是否是字面值或常量，或是否可以通过字面值或常量得到）。</p>
<p>当然，即便做出这样的总结，有时候还是很难看出某个表达式是否是常量表达式，所以C++中引入了constexpr关键字来让编译器帮忙验证变量的值是否是一个常量表达式。</p>
<p>声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化（以及一种特殊的constexpr函数）。</p>
<p>在声明constexpr时用到的类型我们设定为字面值类型（literal type），包括有算数类型，引用，指针等。自定义的类以及标准库内的一些内容都不属于字面值类型。</p>
<p>constexpr需要和const区别对待，并不能划等号。比如constexpr会把其定义的对象置为顶层const，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> *q = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure>
<p>这里的p时常量指针，q是指针常量。</p>
<h3 id="25-处理类型"><a class="markdownIt-Anchor" href="#25-处理类型"></a> 2.5 处理类型</h3>
<h5 id="类型别名"><a class="markdownIt-Anchor" href="#类型别名"></a> 类型别名</h5>
<p>类型别名（type alias）的含义并没有想象的那么复杂，其代表着给类型起一个其他的名字（就类似于给变量起别名一样）。</p>
<p>在C++中，现在有两种方法可以用于定义类型别名：</p>
<ul>
<li>使用关键字typedef；</li>
<li>使用别名声明（alias declaration）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> [类型名] [类型别名];</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> [类型别名] = [类型名];</span><br></pre></td></tr></table></figure>
<h5 id="auto类型说明符"><a class="markdownIt-Anchor" href="#auto类型说明符"></a> auto类型说明符</h5>
<p>auto的用法，就是就是让编译器代替我们去分析表达式所属的类型。auto会根据变量的初始值来判断变量的类型（所以用auto定义的变量必须有初始值）。</p>
<p>注意：因为一条语句只能有一个基本数据类型，所以即便是auto语句中，也只能对应一种基本数据类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> [变量名] = [初始值];</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>上面的例子中auto会根据初始值10被推断为int，并以该初始值赋对a进行初始化；</p>
<h5 id="decltype类型指示符"><a class="markdownIt-Anchor" href="#decltype类型指示符"></a> decltype类型指示符</h5>
<p>decltype的用法和auto完全不一样，auto是根据初始值进行推断，而decltype是根据给定的函数的返回值进行类型的推断，跟初始值无关联，甚至不强制要求赋予初始值（引用等必须要求初始值的情况除外）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>([函数名]()) [变量名];</span><br><span class="line"><span class="keyword">decltype</span>([函数名]()) [变量名] = [初始值];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">f</span>()) a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">decltype</span>(i) d;</span><br></pre></td></tr></table></figure>
<p>这里a的类型就是f()的返回值的类型，即int类型，d的类型就是i的类型，也为int。</p>
<p>此外存在一种特殊情况，decltype的表达式如果是加上括号的变量，结果将是一个引用（而引用，必须初始化）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">decltype</span>((i)) e = a;</span><br></pre></td></tr></table></figure>
<h3 id="26-自定义数据结构"><a class="markdownIt-Anchor" href="#26-自定义数据结构"></a> 2.6 自定义数据结构</h3>
<p>本小节将会探讨简单的自定义数据结构，即仅具备数据成员（data member）的类。在定义该类数据类型时，需要使用关键字struct。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> [类名]</span><br><span class="line">&#123;</span><br><span class="line">    [数据成员]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以使用class，但是要知道仅从作用上来讲，两者是一致的。通常习惯上来讲，我们把用struct定义的类称为是结构体，用class定义的类称为是类。</p>
<p>其中，数据成员部分可以提供一个类内初始值，创建对象时，类内初始值可以用于对数据成员的初始化。</p>
<p>前面小节提到过C++的分离式编译，可以将一个类拆在头文件和cpp文件里分别实现，从而能够“多次声明，单次实现”。头文件通常包含那些只能被定义一次的实体，如类、const和constexpr变量。</p>
<p>头文件需要承担的另一个责任就是包含与被包含——头文件可以包含其他的头文件（#include），也可以被其他的文件包含。</p>
<p><code>#include</code>本身是一个预处理功能，它是由预处理器（preprocessor）承担，在正式编译之前所执行的一段功能，实际上就是以相应的代码替换掉对应的行。</p>
<p>在某些情况下可能我们会有意无意得重复包含同一个头文件，那么它可能就会被重复展开，这自然是不行的，会造成变量以及函数的重复。所以预处理器提供了另一项预处理功能——头文件保护符（header guard）。</p>
<p>常用的写法有：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> [预处理变量]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> [预处理变量]</span></span><br><span class="line"></span><br><span class="line">[头文件内容]</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>这样就可以保证该头文件内容被只在第一次被包含时展开，重复包含时会自动略过。</p>
<h2 id="第三章-字符串-向量和数组"><a class="markdownIt-Anchor" href="#第三章-字符串-向量和数组"></a> 第三章 字符串、向量和数组</h2>
<h3 id="31-命名空间的using声明"><a class="markdownIt-Anchor" href="#31-命名空间的using声明"></a> 3.1 命名空间的using声明</h3>
<p>作用域操作符（::）的含义是：编译器应从操作符左侧的名字所示的作用域中寻找右侧那个名字。而存在一种更加方便、也更加安全的方法来实现同样的效果，也就是使用using声明（using declaration）。</p>
<p>using声明的形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::name;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    cin &gt;&gt; i;</span><br><span class="line">    std::cout &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还可以声明多个using声明，而快捷得使用多个命名空间下的名字。</p>
<p>注意：位于头文件中的代码一般来说不应该使用using声明，因为头文件中的内容会被反复引用，这样using语句也被反复添加，从而可能会产生很多的命名冲突。</p>
<h3 id="32-string"><a class="markdownIt-Anchor" href="#32-string"></a> 3.2 string</h3>
<p>标准库类型string表示可变长的字符序列，使用string需要添加以下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string; </span><br></pre></td></tr></table></figure>
<h5 id="定义和初始化"><a class="markdownIt-Anchor" href="#定义和初始化"></a> 定义和初始化</h5>
<p>前面提到过，可以通过默认的方式初始化一个string对象，这样就得到一个空的字符串。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s1;</span><br></pre></td></tr></table></figure>
<p>当我们使用等号（=）来初始化一个变量时，实际上执行的是拷贝初始化（copy initialization），是编译器把等号右侧的初始值拷贝到新创建的对象中去的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s2 = s1;</span><br><span class="line">string s3 = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>反之，若没使用等号，而是用小括号（()）等，则是直接初始化（direct initialization）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">s4</span><span class="params">(s3)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s5</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s6</span><span class="params">(n, <span class="string">&#x27;c&#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h5 id="string对象上的操作"><a class="markdownIt-Anchor" href="#string对象上的操作"></a> string对象上的操作</h5>
<p><strong>读写string对象</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>程序的效果是用istream对象从第一个非空格的字符开始读取，到后面遇到的第一个空格为止，之间的字符串，写入到s，然后用ostream对象进行输出。</p>
<p><strong>读取未知数量的string对象</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; word)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; word &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>读取一整行的字符串</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string line;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">getline</span>(cin, line))</span><br><span class="line">    cout &lt;&lt; line &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>getline函数就是用来获取一整行输入的函数，它接收一个istream对象，和一个string类型对象，返回istream类型。注意getline返回的对象不包含换行符。</p>
<p><strong>string的empty和size</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s;</span><br><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line">s.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure>
<p>s.empty()会返回一个布尔值，用以表示当前字符串是否为空；s.size()会返回一个string::size_type类型的对象，其本质是一个无符号类型的值，而且足够存放下任何string对象的大小。这里要注意无符号类型和有符号类型的混用问题（如int和size_type，尽量避免在同一表达式出现）。</p>
<p><strong>string对象的比较</strong></p>
<p>在进行string对象的比较时，主要有几个关键的运算符：相等性运算符（==和!=），关系运算符（&lt;，&lt;=，&gt;，&gt;=）。</p>
<p>相等性运算符是大小写敏感，用以判断两个string是否完全相同。</p>
<p>关系运算符的规则则比较复杂：</p>
<ul>
<li>如果两个string对象的长度不同，而且较短的string对象的每个字符都与较长string对象对应位置上的字符相同，就说较短string对象小于较长string对象。</li>
<li>如果两个string对象在某些对应位置上不一致，则string对象比较的结果其实是string对象中第一对相异字符比较的结果。</li>
</ul>
<p><strong>string对象的加法</strong></p>
<p>当把string对象和字符字面值及字符串字面值混在一条语句中使用时，必须确保每个加法运算符（+）的两侧的运算对象至少有一个是string。这里需要把握一个核心的原则——字符串字面值和string是不同的类型。</p>
<h3 id="33-vector"><a class="markdownIt-Anchor" href="#33-vector"></a> 3.3 vector</h3>
<p>标准库类型vector表示对象的集合，是多个对象的容器（container），（这样一看，其实把这个对象类型具体到字符，就是上面介绍过的string了）。某种程度上相当于数组，但是又和普通数组存在着一些差别。</p>
<p>使用vector需要在文件开始添加相应的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br></pre></td></tr></table></figure>
<p>vector可以作为<strong>多种对象类型</strong>的容器，实际上是依托C++语言的其中一项特性——模板，更具体来说，是类模板（class template）（此外，模板还包括函数模板）。</p>
<p>模板本身并不是类或者函数，它是编译器帮助编程者快速生成特定的类或者函数的一种便捷方式，其中从模板生成具体类或者函数的过程称为实例化（instantiation），这个过程往往是指定具体的类型。</p>
<p>以vector为例，在使用之前，我们并没有指定vector是一个什么类型对象的容器，所以需要用尖括号（&lt;&gt;）来指定具体的类型，进行实例化操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; iVec;</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; cVec;</span><br></pre></td></tr></table></figure>
<p>单独的vector并不能称为某种类型，而是和具体尖括号里的内容共同构成声明的对象的类型，比如iVec的类型为vector<int>，表示一个容器是一个int类型的数据集合。</p>
<p>而后一个例子cVec基本的用法就等同于string了，可以利用方括号（[]）去具体访问其中的某个字符（前提是该位置上的存在元素），可以使用与string中相同的初始化方法，以及大部分的操作。</p>
<p>关于vector和string后续还会有专门的章节详细介绍其用法，还会引入更多类似的且又有不同特性的容器。</p>
<h3 id="34-迭代器"><a class="markdownIt-Anchor" href="#34-迭代器"></a> 3.4 迭代器</h3>
<p>前面在介绍string和vector，都提到了访问其中某个对象元素（字符）的方法，即通过大括号（[]）和元素下标，实际上还存在另外一种对容器来说更加通用的机制——迭代器（iterator）。</p>
<p>并不是所有的标准库容器都可以使用下标，但是都支持迭代器。</p>
<p>最常见的用法有：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> b = v.<span class="built_in">begin</span>(), e = v.<span class="built_in">end</span>();</span><br></pre></td></tr></table></figure>
<p>begin成员返回指向的第一个元素的迭代器，end成员返回指向的尾元素的下一位置（one past the end），即该迭代器指示的是容器本不存在的尾后（off the end）元素，这样的迭代器称为是尾后迭代器（off-the-end iterator）或简称为尾迭代器（end iterator）。这样的迭代器没有什么意义，仅作标记使用。</p>
<p>前面使用了auto来让编译器帮忙判断迭代器的类型，实际上迭代器的类型就是iterator和const_iterator：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string::iterator strIter;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::const_iterator vIter;</span><br></pre></td></tr></table></figure>
<p>const_iterator常量迭代器和常量指针的概念类似，即无法通过该迭代器修改指向对象的值。</p>
<p>容器迭代器的运算符</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*iter</td>
<td style="text-align:left">返回迭代器iter所指元素的引用</td>
</tr>
<tr>
<td style="text-align:left">iter-&gt;mem</td>
<td style="text-align:left">解引用iter并获取该元素中名为mem的成员，等价于(*iter).mem</td>
</tr>
<tr>
<td style="text-align:left">++iter</td>
<td style="text-align:left">令iter指向容器中的下一个元素</td>
</tr>
<tr>
<td style="text-align:left">–iter</td>
<td style="text-align:left">令iter指向容器中的上一个元素</td>
</tr>
<tr>
<td style="text-align:left">iter1 == iter2、iter1 != iter2</td>
<td style="text-align:left">判断两个迭代器是否相等，即指向是否相同</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">判断两个迭代器是否相等，即指向是否相同</td>
</tr>
</tbody>
</table>
<p>更特殊的，string和vector的迭代器提供了额外的运算符</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">iter + n</td>
<td style="text-align:left">迭代器加上一个整数依然是一个迭代器，指示的新位置与原来相比向前移动了n个元素，可能是某个新元素，也可能是尾迭代器</td>
</tr>
<tr>
<td style="text-align:left">iter - n</td>
<td style="text-align:left">迭代器加上一个整数依然是一个迭代器，指示的新位置与原来相比向后移动了n个元素，可能是某个新元素，也可能是尾迭代器</td>
</tr>
<tr>
<td style="text-align:left">iter += n</td>
<td style="text-align:left">相当于iter = iter + n</td>
</tr>
<tr>
<td style="text-align:left">iter -= n</td>
<td style="text-align:left">相当于iter = iter - n</td>
</tr>
<tr>
<td style="text-align:left">iter1 - iter2</td>
<td style="text-align:left">两个迭代器的减法运算的结果是他们之间的距离，即右侧的迭代器向左移动了距离个元素后得到左侧的迭代器</td>
</tr>
<tr>
<td style="text-align:left">&gt;、&gt;=、&lt;、&lt;=</td>
<td style="text-align:left">迭代器的关系运算符，用来判断迭代器间的相对位置关系</td>
</tr>
</tbody>
</table>
<p>使用迭代器实现二分法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> beg = text.<span class="built_in">begin</span>(), end = text.<span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">auto</span> mid = text.<span class="built_in">begin</span>() + (end - beg)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (mid != end &amp;&amp; *mid != target)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (target &lt; *mid)</span><br><span class="line">    &#123;</span><br><span class="line">        end = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        beg = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mid = beg + (end - beg)/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="35-数组"><a class="markdownIt-Anchor" href="#35-数组"></a> 3.5 数组</h3>
<p>其实按照我的理解，对数组的介绍应该要先于vector的，因为vector毕竟是标准库或者对C++的进一步开发才产生的东西。相比于vector，数组本身更加基础，也更加纯粹，数组也是存放类型相同的对象的容器，其显著特点是数组的大小是确定不变的，也即不可以随便向已有数组中添加元素。</p>
<h5 id="定义和初始化-2"><a class="markdownIt-Anchor" href="#定义和初始化-2"></a> 定义和初始化</h5>
<p>数组是一种复合类型。其声明如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[数据类型] [数组名][[数组维度]];</span><br><span class="line"><span class="type">int</span> a[b];</span><br><span class="line"><span class="type">int</span> *p[d];</span><br></pre></td></tr></table></figure>
<p>数组本身会在默认情况下执行默认初始化，此时数组包含的是一组未定义的值。此外，还可以使用列表初始化的方式进行初始化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>另外，数组不支持直接将某个数组直接拷贝赋值给另一个数组。（即便某些编译器支持这样做，这亦属于编辑器扩展的内容，属于C++的非标准特性，在普适性的编程条件下，应该避免这种操作。）</p>
<h5 id="数组指针"><a class="markdownIt-Anchor" href="#数组指针"></a> 数组指针</h5>
<p>在很多对数组的使用情况下（使用数组名的情况），实际上使用的是数组指针，即指向数组中第一个元素的地址的指针，这个指针本质上也可以认为是前面提到过的迭代器，支持迭代器的一系列操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = arr;			<span class="comment">// p指针是arr的数组指针，即指向arr的第一个元素</span></span><br><span class="line">++p;					<span class="comment">// p指向arr[1],*p的值为1	</span></span><br><span class="line"><span class="type">int</span> temp = *p + <span class="number">3</span>;		<span class="comment">// temp = 4, 1 + 3 = 4，先解引用，再计算</span></span><br><span class="line"><span class="type">int</span> temp02 = * (p + <span class="number">3</span>)	<span class="comment">// temp02 = 4, arr[4] = 4 ，先计算，再解引用</span></span><br></pre></td></tr></table></figure>
<h5 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组"></a> 多维数组</h5>
<p>C++中从根源上讲并没有多维数组，通常谈论的多维数组（二维，三维等）其实是由数组类型所组成的数组。对于常见的二维数组来说，我们通常把第一个维度称为行（row），第二个为称为列（cul）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a[2][3] =&#123;</span><br><span class="line">	&#123;0, 1, 2&#125;,</span><br><span class="line">	&#123;3, 4, 5&#125;</span><br><span class="line">&#125;;				// 2行3列的二维数组</span><br></pre></td></tr></table></figure>
<h2 id="第四章-表达式"><a class="markdownIt-Anchor" href="#第四章-表达式"></a> 第四章 表达式</h2>
<h3 id="41-基础"><a class="markdownIt-Anchor" href="#41-基础"></a> 4.1 基础</h3>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之编译</title>
    <url>/2022/04/25/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<p>虽然不像Unity3D那样以多平台支持作为宣传点，虚幻本身依然是多平台支持的，如Windows，IOS，安卓等等。同时为了应对开发和部署的需要，编译的配置也是一个花样繁多的过程。</p>
<p>本篇文章就初步得从概念和工具的角度对虚幻的编译做一定的总结。</p>
<span id="more"></span>
<p><ul class="markdownIt-TOC">
<li><a href="#%E7%BC%96%E8%AF%91%E7%B3%BB%E7%BB%9F">编译系统</a>
<ul>
<li><a href="#unrealbuildtool">UnrealBuildTool</a></li>
<li><a href="#unrealheadertool">UnrealHeaderTool</a></li>
</ul>
</li>
<li><a href="#%E7%BC%96%E8%AF%91%E7%B1%BB%E5%9E%8B">编译类型</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</p>
<p>本文使用的环境和工具为：</p>
<ul>
<li>Windows 10</li>
<li>ue5</li>
<li>Rider or Unreal Engine 2021.3</li>
</ul>
<h2 id="编译系统"><a class="markdownIt-Anchor" href="#编译系统"></a> 编译系统</h2>
<p><code>编译</code>是指从源程序到产生目标程序的过程，是指从高级语言翻译成机器可以识读的二进制语言的过程，更通俗来讲，它可以是把我们编写的代码、资源，整合成一个可以运行的可以玩的游戏的过程。</p>
<p>编译通常会涉及到一项强有力的工具——编译器，当然标准的编译流程中还会又预处理阶段（由预处理器负责，是和编译器分开的），现在各种功能强大的IDE通常会把这些工作整合到一起在后台做掉，我们一般只需要点一下<code>Build</code>或者<code>Debug</code>又或者<code>Run</code>即可。</p>
<p>当然，虚幻引擎本身及其游戏内容都是由c<ins>写成，其项目编译当然也会遵循这个过程。只不过，虚幻引擎本身的代码量非常之巨大，属性和方法组成了类，类和类相互配合搭建起模块，模块和模块相互依赖构成了系统，而虚幻引擎中类和模块的数量已经难以计数，所以它也推出了自己的一套管理代码的工具（）：UnrealBuildTool（UBT，C#，编译虚幻的各个模块，处理依赖），和UnrealHeaderTool（UHT，C</ins>，头文件解析和代码生成，为反射系统提供支持）。</p>
<h3 id="unrealbuildtool"><a class="markdownIt-Anchor" href="#unrealbuildtool"></a> UnrealBuildTool</h3>
<p>UBT的源码位于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UE_5.0\Engine\Source\Programs\UnrealBuildTool</span><br></pre></td></tr></table></figure>
<p>代码是用C#写成，完整开发的话需要安装相应的.Net桌面开发框架，需要的可以到相应位置查找（一般我们不会去动这个工具，但是相应的，如果需要做一些轻量的修改，可以到BuildConfiguration.cs中探索可供用户配置的编译选项）。而对应的可执行程序的位置在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UE_5.0\Engine\Binaries\DotNET\AutomationTool</span><br></pre></td></tr></table></figure>
<p>这个才是真正编译好的，发挥作用的工具。</p>
<p>对于UBT，我们需要知道的是，当我们去Build或者Rebuild项目时（以及右键点击项目的<code>.uproject</code>文件选择Generate Visual Studio project files时），就会去运行UnrealBuildTool.exe，并传入几个参数（Main函数的参数）：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">UnrealBuildTool</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] ArgumentsArray</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的ArgumentsArray即是通过采样C++构建系统NMake的Build Command Line来确定几个参数，主要是项目名称，编译的Target（目标），目标平台等等。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BC%96%E8%AF%91/Compile_BuildCommandLine.png" alt="" /></p>
<p>然后读取build.cs，确定模块与模块之间的依赖关系（需要去编译哪些模块，需要忽略哪些模块的编译工作，模块的没有变动的话会跳过）。</p>
<p>随后，UBT调用UHT执行头文件解析和代码生成的工作，UHT会根据反射标签生成相应的代码（如对应<code>GENERATED_BODY()</code>的宏替换代码就位于生成的<code>.generated.h</code>中，又如<code>UPROPERTY()</code>标记的属性被序列化到蓝图中，等等，详情参考讲解反射的相关文章）。</p>
<p>最后，UBT通过确定好的依赖关系调用编译器编译变更模块的C++代码。</p>
<h3 id="unrealheadertool"><a class="markdownIt-Anchor" href="#unrealheadertool"></a> UnrealHeaderTool</h3>
<p>UHT的源码位于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UE_5.0\Engine\Source\Programs\UnrealHeaderTool</span><br></pre></td></tr></table></figure>
<p>UHT工具与虚幻的反射机制息息相关，可以这样说，UHT是构建于虚幻UObject系统基础上的宏生成和替换工具（当然，还是用原文“头文件解析工具”更贴切）。</p>
<p>反射是很多游戏引擎都依赖的特性，像Unity3D借用了C#的反射。当然不同的是，C<ins>本身并不支持反射（原生C</ins>有RTTI，Runtime Type Identification，即运行时类型识别），而是虚幻在普通C++上实现了这样的一套反射机制。这样，便使<strong>运行时</strong>获取类的元数据变得简单，从实现GC，序列化等一些引擎需要的功能。</p>
<p>举个例子，用<code>UPROPERTY()</code>标记的属性，可以序列化在蓝图中，通过其中的说明符可以进一步定制该属性的特性（详情参阅说明符关键字相关文章）。</p>
<h2 id="编译类型"><a class="markdownIt-Anchor" href="#编译类型"></a> 编译类型</h2>
<p>编译虚幻项目时，可以是简单的选择项目，然后右键Build，然后运行Debug；但是此时可能就会遇到一些问题，为什么有些代码我打了断点，却无法进入断点呢？</p>
<p>这个就是虚幻C++项目的一个小坑了，关键就在于编译的配置。</p>
<p>我们可以发现在每个模块都有对应的<code>.Target.cs</code>，包括我们的游戏模块。其内容就是对该模块应该面向哪一种编译的目标。</p>
<p>这里这个编译的Target，我们可以理解为我们出于什么目的来编译这个模块，是为了让别人在游戏中直接使用？还是别人可以在编辑器中应用调整该模块？等等。</p>
<p>例如我们的游戏模块，我们知道这个游戏是冲着打成包给别人玩的，那么就有专门的<code>.Target.cs</code>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Type = TargetType.Game;</span><br></pre></td></tr></table></figure>
<p>这里的Target为[empty]</p>
<p>此外，这个游戏模块还要供我们在编辑器内编辑使用，可能还会用到调试，那么还有另外一个<code>__Editor.Target.cs</code>：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Type = TargetType.Editor;</span><br></pre></td></tr></table></figure>
<p>这里的Target为Editor。</p>
<p>此外Target的可选项还有Client和Server，分别对应着客户端和服务器的编译目标。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Target</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">[empty]</td>
<td style="text-align:center">不带编辑器的一个独立可执行版本，需要提前<a href="https://docs.unrealengine.com/5.0/en-US/packaging-unreal-engine-projects/">打包</a>烘培内容资源</td>
</tr>
<tr>
<td style="text-align:center">Editor</td>
<td style="text-align:center">在虚幻编辑器里打开并可编辑游戏项目，所有代码的更改也会反映到编辑器中</td>
</tr>
<tr>
<td style="text-align:center">Client</td>
<td style="text-align:center">多人联网功能中的客户端版本，需要在项目中提供<code>__Client.Target.cs</code>（参照<code>__Editor.Target.cs</code>的写法）</td>
</tr>
<tr>
<td style="text-align:center">Server</td>
<td style="text-align:center">多人联网功能中的服务器版本，需要在项目中提供<code>__Server.Target.cs</code>（参照<code>__Editor.Target.cs</code>的写法）</td>
</tr>
</tbody>
</table>
<p>除了Target外，还有另外一关键字需要注意——State（通常State在前，Target在后，即[State] [Target]）。</p>
<p>State是用来描述我们当前引擎和游戏项目的状态，我们的游戏要准备打包发行了，就使用Shipping；我还处在游戏开发阶段，需要通过代码进行某些游戏代码的调试，就使用DebugGame；而若是只需要通过编辑器的反射来查看代码的更改的话，那么Development一般就可满足条件（这也是默认的状态，虚幻官方推荐新手以蓝图开发为主，代码开发为辅）。</p>
<table>
<thead>
<tr>
<th style="text-align:center">State</th>
<th style="text-align:center">Engine</th>
<th style="text-align:center">Game</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Debug</td>
<td style="text-align:center">Debug</td>
<td style="text-align:center">Debug</td>
<td style="text-align:center">会同时去构建引擎和游戏两者的代码，是最全面的构建，但同时也会比较费时间</td>
</tr>
<tr>
<td style="text-align:center">DebugGame</td>
<td style="text-align:center">Release</td>
<td style="text-align:center">Debug</td>
<td style="text-align:center">以最优的方式构建引擎，同时保持游戏部分的代码支持调试，适用于仅调试代码的模式</td>
</tr>
<tr>
<td style="text-align:center">Development</td>
<td style="text-align:center">Release</td>
<td style="text-align:center">Release</td>
<td style="text-align:center">可以在编辑器内通过反射的方式查看代码所带来的更改，是开发和性能最平衡的模式</td>
</tr>
<tr>
<td style="text-align:center">Shipping</td>
<td style="text-align:center">Release</td>
<td style="text-align:center">Release</td>
<td style="text-align:center">最佳性能配置，用于交付游戏，无控制台命令、统计数据和性能分析工具</td>
</tr>
<tr>
<td style="text-align:center">Test</td>
<td style="text-align:center">Release</td>
<td style="text-align:center">Release</td>
<td style="text-align:center">同Shipping模式，但是启用了控制台命令、统计数据和性能分析工具</td>
</tr>
</tbody>
</table>
<p>这两个关键字大部分情况都可以组合使用，但是还是有一些例外情况。</p>
<p>编译配置——编译解决方案（有引擎源码版），此时是将引擎源代码和游戏项目的源代码一同编译，其可选配置如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Debug</th>
<th style="text-align:center">DebugGame</th>
<th style="text-align:center">Development</th>
<th style="text-align:center">Shipping</th>
<th style="text-align:center">Test</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">[empty]</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
</tr>
<tr>
<td style="text-align:center">Editor</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Client</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
</tr>
<tr>
<td style="text-align:center">Server</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
</tr>
</tbody>
</table>
<p>编译配置——编译项目（无引擎源码版），此时是将游戏项目的源代码单独编译，其可选配置如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Debug</th>
<th style="text-align:center">DebugGame</th>
<th style="text-align:center">Development</th>
<th style="text-align:center">Shipping</th>
<th style="text-align:center">Test</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">[empty]</td>
<td style="text-align:center"></td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Editor</td>
<td style="text-align:center"></td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Client</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Server</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<p>UBT也好，UHT也好，甚至于IDE也好，作为工具来说是他们都是非常强大可靠的，同时其强大的代价就是其内部项目的驳杂，会在我们希望深入内部时造成一定的阅读学习困难。</p>
<p>好在，一方面，作为游戏开发者、引擎使用者来说，我们不是必须要把这些工具的内部代码理解通透，而是掌握其基本特性和工作流程已是不错，随着分工不断得细化，我们程序也会走向不同的分工，可能确实有一些同时需要切实掌握并且具备修改的能力，但是对于大部分Gameplay和System的编程者来说，能够完全掌握本文及链接所述内容已是不俗。</p>
<p>另一方面，网络上也越来越多得出现技术和知识的共享者，本文的成文就是综合多方阅读资源进行总结的结果，这里也表达我的谢意。</p>
<p>最后，如果文中有一些技术性或者表述性的错误，还请大家多予指点。</p>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="https://docs.unrealengine.com/5.0/en-US/build-configurations-reference-for-unreal-engine/">虚幻 5.0 Documentation - Build Configurations Reference</a></p>
<p><a href="https://docs.unrealengine.com/5.0/en-US/compiling-game-projects-in-unreal-engine-using-cplusplus/">虚幻 5.0 Documentation - Compiling Game Projects</a></p>
<p>知乎作者 大钊 的文章<a href="https://zhuanlan.zhihu.com/p/22814098">《InsideUE4》</a></p>
<p>知乎作者 雪流星 的文章<a href="https://zhuanlan.zhihu.com/p/458435453">《虚幻编译系统总结》</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>C++</tag>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻插件之Quest System</title>
    <url>/2022/04/19/%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/</url>
    <content><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2>
<p>Quest System是针对游戏设计中的任务设计而制作的一个编辑器插件，在它的帮助下，我们能够有条理得进行任务的制定和分配，从而进行游戏流程的控制。</p>
<p>但是相应的，其官方支持文档言简意赅，对非程序的和不熟悉外语的使用者来说存在一定的上手难度。</p>
<p>本文就是为了帮助读者能够快速入门Quest System，掌握相应的任务制作方法和流程而编写的。</p>
<span id="more"></span>
<h2 id="快速上手"><a class="markdownIt-Anchor" href="#快速上手"></a> 快速上手</h2>
<p>资产购买链接：<a href="https://www.unrealengine.com/marketplace/en-US/product/quest-system-02">https://www.unrealengine.com/marketplace/en-US/product/quest-system-02</a></p>
<p>该插件兼容4.24-5.0的虚幻编辑器版本。</p>
<h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3>
<p>该插件是以纯蓝图的形式提供，所以将其融入项目的方式比较多样。我这里就直接以插件内容创建项目，并导入虚幻5下的第三人称模板，后面的例子也将以第三人称模板为基础进行搭建。</p>
<p>为第三人称模板创建PlayerController，并将其父类修改为BP_QuestController（是Quest System提供的PlayerController，主要是继承了一个IQuestControllerInterface，包含了一个C_QuestComponent，以及相应实现的一些接口函数和事件等等）。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_PlayerControllerStruct.png" alt="" /></p>
<p>然后调整第三人称的GameMode（修改默认的PlayerController为我们刚刚创建的BP_PlayerController），并将该GameMode应用到全局（或者当前World也可）。</p>
<p>最后在第三人称模板中的第三人称角色蓝图BP_ThirdPersonCharacter中添加如下蓝图代码（可以从Quest System提供的BP_QuestPlayer中复制得到），这是读取用户输入来和NPC等可交互物/人等作交互使用：</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_InteractionCodeInCharacter.png" alt="" /></p>
<p>此时，运行程序后，可以尝试按下<code>L</code>键呼出任务面板，当然里面还没有任何内容。 下面正式开始任务内容的创建。</p>
<p>现在假设我们要制作的第一个任务是新手引导任务，其大致的流程是：玩家去找引导NPC对话，NPC发布任务，需要玩家完成打开任务面板的操作和提交完成任务的操作。</p>
<h3 id="quest创建"><a class="markdownIt-Anchor" href="#quest创建"></a> Quest创建</h3>
<p>在任意处新建DataTable，并在Pick Row Structure时选择S_Quest，这是Quest System定义的数据结构，创建好的空数据表如下：</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_DataTableCreation.png" alt="" /></p>
<p>点击Add增加数据模板，其中的条目我们可以按需配置。根据前面设定的简单任务要求，我们进行数据表的配置：</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_FirstCustomQuest.png" alt="" /></p>
<p>这里注意任务的Row Name和QuestID在规定里要保持一致。QuestName和Decription Paragraph里的内容将会显示到任务UI上，所以这里可以尽情施展才华。</p>
<p>这些内容只是用来提示玩家的，而后面的Task则是会进一步细化玩家的操作目标。</p>
<h3 id="task创建"><a class="markdownIt-Anchor" href="#task创建"></a> Task创建</h3>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_QuestTask.png" alt="" /></p>
<p>Task ID是用来查找相应任务的标识符，起的时候应当尽量好记易懂。</p>
<p>Task Description是对任务的描述，它和后面的Current Amount（当前进度）和Needed Amount（完成Task需要的总进度）会共同作用，显示在任务UI上。</p>
<p>此外，我们可以在一个Quest内创建多个Task，而这些Task之间可以是同时出现（即玩家可以并行得去完成这些Task），也可以有强依赖顺序（即玩家完成Task1后才能开始执行Task2），关键就在于EnabledByDefault和EnabledTasksOnComplete。例如本例中，“提交完成任务”的Task就只能在完成“呼出任务面板”的Task完成后才会出现。</p>
<p>到这里，基本的任务创建已经完成，针对数据表还需要一步操作，找到DB_Quest_Composition，将我们刚刚创建好的数据表添加到Parent Tables栏位中：</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_DataTableComposition.png" alt="" /></p>
<p>到此任务的创建基本完成，接下来我们需要在场景中确定我们的任务NPC分布，并添加任务的相关道具。</p>
<h3 id="任务与npc的绑定"><a class="markdownIt-Anchor" href="#任务与npc的绑定"></a> 任务与NPC的绑定</h3>
<p>任务NPC（BP_QuestNPC）可以在Quest System提供的包内找到，并且可以直接放置于场景中使用。</p>
<p>这里对NPC主要进行的配置是添加Available Quest IDs，这决定着这个NPC控制着哪些任务。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_QuestNPCConfig.png" alt="" /></p>
<p>另外，Quest Filter ID是该NPC的标识符，可以在配置数据表的时候通过和CanBeAccessedOnlyBy和CanBeCompletedOnlyBy相配合发挥作用。、</p>
<p>另外的一个变量——Quest Task ID即对应着数据表中Task里的Quest Task ID，这里输入的字符串表明了当你与该NPC交互时可以完成的子任务为哪一个。</p>
<p>当然，我们当时定义了另外一个子任务，其完成是在PlayerController里：</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_AddQuest.png" alt="" /></p>
<p><code>AddQuestTaskAmount</code>是任务完成的底层逻辑实现，即当我们完成某一操作时可以在蓝图里进行判断，并调用该函数来增加CurrentAmount，当CurrentAmount和NeededAmount相等时，就表示Quest已经完成。</p>
<iframe src="//player.bilibili.com/player.html?aid=768312475&bvid=BV12r4y1H7x4&cid=580259670&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<h2 id="底层拆解蓝图程序向可跳过"><a class="markdownIt-Anchor" href="#底层拆解蓝图程序向可跳过"></a> 底层拆解（蓝图程序向，可跳过）</h2>
<p>Quest System是完全由蓝图实现的，其中设计到一定量的类，接口，数据结构等。本小节将着眼于其中较为核心的部分，主要是控制器类和NPC类，穿插一些其中涉及到的组件、接口等。</p>
<h3 id="控制器"><a class="markdownIt-Anchor" href="#控制器"></a> 控制器</h3>
<p>Quest System的控制器类BP_QuestController的特点主要是：挂载了C_WidgetManager_QuestSystem和C_QuestComponent，以及继承了IQuestControllerInterface。</p>
<p>IQuestControllerInterface接口的函数主要有：</p>
<ul>
<li>AcceptQuest</li>
<li>AbortQuest</li>
<li>CompleteQuest</li>
<li>AddQuestTaskAmount</li>
<li>TrackQuest</li>
</ul>
<p>当你想和UI交互时，可能会用到<code>AbortQuest</code>；当你击杀了某个任务Boss，可能会想要用到<code>AddQuestTaskAmount</code>等等。</p>
<p>这些函数更进一步，在控制器上，是通过C_QuestComponent里的功能来实现的。所以当我们想要去访问控制任务的核心模块时，就直接去找控制器上的QuestComponent即可。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_QuestComponent.png" alt="" /></p>
<h3 id="任务发布的npc"><a class="markdownIt-Anchor" href="#任务发布的npc"></a> 任务发布的NPC</h3>
<p>任务的发布不一定是需要NPC来执行，也可以是任何其他Actor，但是从任务发布NPC身上，可以一窥任务发布的流程。</p>
<p>本质上，QuestNPC只是一个Actor，其继承了一个IInteraction接口用来实现交互效果（按E键）。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BQuest-System/QuestSystem_QuestNPC.png" alt="" /></p>
<p>从蓝图中可以看到，NPC的行为主要有:</p>
<ul>
<li>在NPC加载时（BeginPlay），按照配置好的数据进行任务的加载；</li>
<li>在交互时，进行任务完成情况的更新和任务UI的更新。</li>
</ul>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<p>Quest System任务系统提供了一套任务定制的解决方案，并且能够较为顺畅得在项目中落地；但是相应的，作为一款工具来讲，Quest System的界面和相应的工作配置流程是较为繁琐和分散的，且并没有很多高级的定制化的功能，在应对小体量项目开发时使用效率尚可，但是应对大体量作品时，其开发效率和管理成本可能会不尽如人意。此时，使用其他解决方案或者在Quest System的基础上进行一定量的定制可能会是正解。</p>
<p>另外，如果有需要，本文后续还会更新针对Quest System的更多蓝图程序和数据结构进行分析和拆解。</p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>插件</tag>
        <tag>任务系统</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 119 杨辉三角 II</title>
    <url>/2022/04/15/LeetCode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92-II/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。
</font>
<font color=#999AAA >
在「杨辉三角」中，每个数是它左上方和右上方的数的和。
</font>
<p></p>
<ul>
<li>示例 1:<br />
输入: rowIndex = 3<br />
输出: [1,3,3,1]</li>
<li>示例 2:<br />
输入: rowIndex = 0<br />
输出: [1]</li>
<li>示例 3:<br />
输入: rowIndex = 1<br />
输出: [1,1]</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/pascals-triangle-ii">https://leetcode-cn.com/problems/pascals-triangle-ii</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h2>
<p>与118题一样，只不过答案更加简化，只需要给出目标行数的数组即可。</p>
<p>所以可以不用二维数组，而直接使用两个数组来交替换行即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="type">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vCur = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vPre = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rowIndex == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> vPre;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rowIndex == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> vCur;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= rowIndex; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            vPre.<span class="built_in">resize</span>(i);</span><br><span class="line">            vPre = vCur;</span><br><span class="line">            vCur.<span class="built_in">resize</span>(i+<span class="number">1</span>);</span><br><span class="line">            vCur[<span class="number">0</span>] = vCur[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                vCur[j] = vPre[j<span class="number">-1</span>]+vPre[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vCur;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="LeetCode119_result.png" alt="" /></p>
<p>复杂度分析<br />
时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>r</mi><mi>o</mi><mi>w</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(rowIndex)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><br />
空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻代码中支持反射的说明符关键字——USTRUCT篇</title>
    <url>/2022/04/13/%E8%99%9A%E5%B9%BB%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%94%AF%E6%8C%81%E5%8F%8D%E5%B0%84%E7%9A%84%E8%AF%B4%E6%98%8E%E7%AC%A6%E5%85%B3%E9%94%AE%E5%AD%97%E2%80%94%E2%80%94USTRUCT%E7%AF%87/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻代码中支持反射的说明符关键字——UFUNCTION篇（更新中）</title>
    <url>/2022/04/13/%E8%99%9A%E5%B9%BB%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%94%AF%E6%8C%81%E5%8F%8D%E5%B0%84%E7%9A%84%E8%AF%B4%E6%98%8E%E7%AC%A6%E5%85%B3%E9%94%AE%E5%AD%97%E2%80%94%E2%80%94UFUNCTION%E7%AF%87/</url>
    <content><![CDATA[<p>虚幻引擎代码纷繁复杂，一定程度上就是因为从UObject开始架构的这套反射系统，<br />
它在带给我们优秀的反射机制的同时，也让代码的阅读及编写有了一定的门槛。</p>
<p>本篇文章的目的，就希望通过拆解虚幻中说明符关键字的这一环，帮助更多人逐步消解跨过这一道门槛。</p>
<p>本文是系列文章中针对UFUNCTION中涉及到的说明符关键字的解释。</p>
<span id="more"></span>
<h2 id="总览"><a class="markdownIt-Anchor" href="#总览"></a> 总览</h2>
<table>
<thead>
<tr>
<th>关键字</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="拆解"><a class="markdownIt-Anchor" href="#拆解"></a> 拆解</h2>
<h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/Specifiers/">虚幻 4.26 Documentation - Function Specifiers</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>ue5</tag>
        <tag>反射</tag>
        <tag>关键字</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻代码中支持反射的说明符关键字——UCLASS篇（更新中）</title>
    <url>/2022/04/13/%E8%99%9A%E5%B9%BB%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%94%AF%E6%8C%81%E5%8F%8D%E5%B0%84%E7%9A%84%E8%AF%B4%E6%98%8E%E7%AC%A6%E5%85%B3%E9%94%AE%E5%AD%97%E2%80%94%E2%80%94UCLASS%E7%AF%87/</url>
    <content><![CDATA[<p>虚幻引擎代码纷繁复杂，一定程度上就是因为从UObject开始架构的这套反射系统，<br />
它在带给我们优秀的反射机制的同时，也让代码的阅读及编写有了一定的门槛。</p>
<p>本篇文章的目的，就希望通过拆解虚幻中说明符关键字的这一环，帮助更多人逐步消解跨过这一道门槛。</p>
<p>本文是系列文章中针对UCLASS中涉及到的说明符关键字的解释。</p>
<span id="more"></span>
<h2 id="总览"><a class="markdownIt-Anchor" href="#总览"></a> 总览</h2>
<table>
<thead>
<tr>
<th>关键字</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Within=OuterClassName</td>
<td>此类的对象无法在<code>OuterClassName</code>对象的实例之外存在。这意味着，要创建此类的对象，需要提供<code>OuterClassName</code>的一个实例作为其<code>Outer</code>对象。</td>
</tr>
<tr>
<td>config=ConfigName</td>
<td>指示此类可在配置文件（.ini）中存储数据。如果存在任何使用<code>config</code>或<code>globalconfig</code>说明符声明的类属性，此说明符将使这些属性存储在指定的配置文件中。此说明符会传播到所有子类并且无法使此说明符无效，但是子类可通过重新声明<code>config</code>说明符并提供不同的<code>ConfigName</code>来更改配置文件。常见的<code>ConfigName</code>值是&quot;Engine&quot;、“Editor”、“Input&quot;和&quot;Game”。</td>
</tr>
<tr>
<td>transient</td>
<td>此类的对象不会被保存到磁盘。常当与不持久的特定种类的native类配合使用。此说明符会传播到子类，但是可由<code>NonTransient</code>说明符覆盖。</td>
</tr>
</tbody>
</table>
<h2 id="拆解"><a class="markdownIt-Anchor" href="#拆解"></a> 拆解</h2>
<h3 id="withinouterclassname-configconfigname-transient"><a class="markdownIt-Anchor" href="#withinouterclassname-configconfigname-transient"></a> Within=OuterClassName, config=ConfigName, transient</h3>
<p>研究来源：PlayerInput.h中的UPlayerInput类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Within=PlayerController, config=Input, transient)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ENGINE_API</span> UPlayerInput : <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/** Generic bindings of keys to Exec()-compatible strings for development purposes only */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(config)</span><br><span class="line">	TArray&lt;<span class="keyword">struct</span> <span class="title class_">FKeyBind</span>&gt; DebugExecBindings;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">/** List of Axis Mappings that have been inverted */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(config)</span><br><span class="line">	TArray&lt;FName&gt; InvertedAxis;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Within=PlayerController表明UPlayerInput的对象不能在PlayerController的对象之外存在，<br />
实际上意味着我们不能够随随便便在某处new一个UPlayerInput出来，属于服务于代码规范和框架规范的说明符。</p>
<p>config=Input表明UPlayerInput会对Input.ini配置文件进行数据存储，<br />
<code>DebugExecBindings</code>和<code>InvertedAxis</code>即是要存储的属性。</p>
<p>transient表明UPlayerInput的对象不会被保存到磁盘，</p>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Classes/Specifiers/">虚幻 4.26 Documentation - Class Specifiers</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>ue5</tag>
        <tag>反射</tag>
        <tag>关键字</tag>
        <tag>类</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻代码中支持反射的说明符关键字——UPROPERTY篇（更新中）</title>
    <url>/2022/04/13/%E8%99%9A%E5%B9%BB%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%94%AF%E6%8C%81%E5%8F%8D%E5%B0%84%E7%9A%84%E8%AF%B4%E6%98%8E%E7%AC%A6%E5%85%B3%E9%94%AE%E5%AD%97%E2%80%94%E2%80%94UPROPERTY%E7%AF%87/</url>
    <content><![CDATA[<p>虚幻引擎代码纷繁复杂，一定程度上就是因为从UObject开始架构的这套反射系统，<br />
它在带给我们优秀的反射机制的同时，也让代码的阅读及编写有了一定的门槛。</p>
<p>本篇文章的目的，就希望通过拆解虚幻中说明符关键字的这一环，帮助更多人逐步消解跨过这一道门槛。</p>
<p>本文是系列文章中针对UPROPERTY中涉及到的说明符关键字的解释。</p>
<span id="more"></span>
<h2 id="总览"><a class="markdownIt-Anchor" href="#总览"></a> 总览</h2>
<table>
<thead>
<tr>
<th>关键字</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="拆解"><a class="markdownIt-Anchor" href="#拆解"></a> 拆解</h2>
<h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Properties/Specifiers/">虚幻 4.26 Documentation - Property Specifiers</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>ue5</tag>
        <tag>反射</tag>
        <tag>关键字</tag>
        <tag>属性</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 118 杨辉三角</title>
    <url>/2022/04/13/LeetCode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">数学推导，动态规划</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个非负整数 numRows，生成「杨辉三角」的前 numRows 行。
</font>
<font color=#999AAA >
在「杨辉三角」中，每个数是它左上方和右上方的数的和。
</font>
<p></p>
<ul>
<li>示例 1:<br />
输入: numRows = 5<br />
输出: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</li>
<li>示例 2:<br />
输入: numRows = 1<br />
输出: [[1]]</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/pascals-triangle">https://leetcode-cn.com/problems/pascals-triangle</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="数学推导动态规划"><a class="markdownIt-Anchor" href="#数学推导动态规划"></a> 数学推导，动态规划</h2>
<p>数组的每一层都可以由上一层推导而来，简化公式为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">v[i][j+1] = v[i-1][j] + v[i-1][j+1];
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">;</span></span></span></span></span></p>
<p>其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>为行数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>为列数。</p>
<p>此外，注意边界条件即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generate</span>(<span class="type">int</span> numRows) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v0 = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v1 = &#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(v0);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(v1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; numRows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(i+<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt; i)</span><br><span class="line">                &#123;</span><br><span class="line">                    v[j+<span class="number">1</span>] = res[i<span class="number">-1</span>][j] + res[i<span class="number">-1</span>][j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="LeetCode118_result.png" alt="" /><br />
复杂度分析<br />
时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>R</mi><mi>o</mi><mi>w</mi><msup><mi>s</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(numRows^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，基本上是数组空间大小这一数量级<br />
空间复杂度：开辟辅助数组所出现的消耗，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻5新特性之AbilitySystemGameFeatureActions</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB5%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BAbilitySystemGameFeatureActions/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻5新特性之World Partition</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB5%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BWorldPartition/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之资源处理</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之Slate</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BSlate/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之图形编程</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E5%BD%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之OnlineSubSystem</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BOnlineSubSystem/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之Actor</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BActor/</url>
    <content><![CDATA[<span id="more"></span>
<p><ul class="markdownIt-TOC">
<li><a href="#%E7%BC%96%E8%BE%91%E5%99%A8%E5%86%85%E7%9A%84level">编辑器内的Level</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</p>
<h2 id="编辑器内的level"><a class="markdownIt-Anchor" href="#编辑器内的level"></a> 编辑器内的Level</h2>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="https://docs.unrealengine.com/5.0/en-US/gameplay-framework-in-unreal-engine/">虚幻 5.0 Documentation - Gameplay Framework</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>C++</tag>
        <tag>Actor</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之多人游戏与网络复制</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%9A%E4%BA%BA%E6%B8%B8%E6%88%8F%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之调试工具</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之性能分析</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之本地化</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之行为树</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%A1%8C%E4%B8%BA%E6%A0%91/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之数据驱动</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之原生Input</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8E%9F%E7%94%9FInput/</url>
    <content><![CDATA[<p>输入是游戏交互中非常重要的一环，输入处理本质上是让机器读取、理解人的某项操作。这个过程是否完善，是否符合人的直观认知，直接影响一款游戏的操作手感，从而影响到游戏的品质。</p>
<p>虚幻引擎内置实现了一套原生的Input模块，在多个版本一直沿用，同时在实际项目中，又会被具体项目组进行定制，从而衍生了一定量的输入补充插件。</p>
<p>本文的目的不在于那些衍生的针对输入的代码插件或者蓝图插件，而是着眼于虚幻底层的输入部分，看看原生的输入部分的代码，也为以后的使用、改写和扩展建立理论基础。</p>
<span id="more"></span>
<p><ul class="markdownIt-TOC">
<li><a href="#playerinput">PlayerInput</a></li>
<li><a href="#inputcomponent">InputComponent</a>
<ul>
<li><a href="#actor%E5%86%85%E7%9A%84inputcomponent">Actor内的InputComponent</a></li>
<li><a href="#playercontroller%E5%86%85%E7%9A%84inputstack">PlayerController内的InputStack</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</p>
<h2 id="playerinput"><a class="markdownIt-Anchor" href="#playerinput"></a> PlayerInput</h2>
<p>PlayerInput对象主要负责的是对玩家的输入数据的处理，是虚幻接收外部硬件输入并将信号处理后转入内部的一个中间模块。</p>
<p>PlayerInput主要是在PlayerController里发挥管理作用， 在类定义的时候已经用关键字<code>Within=PlayerController</code>进行标记，表示其对象是存在于和PlayerController的对象实例里的，这意味着不可以随随便便去创建其他的PlayerInput。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Within=PlayerController, config=Input, transient)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ENGINE_API</span> UPlayerInput : <span class="keyword">public</span> UObject</span><br></pre></td></tr></table></figure>
<p>PlayerInput中，又声明了两个数组，<code>FInputActionKeyMapping</code>数组和<code>FInputAxisKeyMapping</code>数组，分别定义了动作映射<code>ActionMappings</code>和轴映射<code>AxisMappings</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** This player&#x27;s version of the Action Mappings */</span></span><br><span class="line">TArray&lt;<span class="keyword">struct</span> <span class="title class_">FInputActionKeyMapping</span>&gt; ActionMappings;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** This player&#x27;s version of Axis Mappings */</span></span><br><span class="line">TArray&lt;<span class="keyword">struct</span> <span class="title class_">FInputAxisKeyMapping</span>&gt; AxisMappings;</span><br></pre></td></tr></table></figure>
<p>结构体<code>FInputActionKeyMapping</code>，其中又有两个属性<code>ActionName</code>和<code>Key</code>，分别表示的是该输入绑定的动作名称和相应按键，其余属性均为组合按键的选项（如shift + 按键，来表示奔跑的指令）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Defines a mapping between an action and key </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="built_in">USTRUCT</span>( BlueprintType )</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FInputActionKeyMapping</span></span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/** Friendly name of action, e.g &quot;jump&quot; */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	FName ActionName;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** true if one of the Shift keys must be down when the KeyEvent is received to be acknowledged */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	uint8 bShift:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** true if one of the Ctrl keys must be down when the KeyEvent is received to be acknowledged */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	uint8 bCtrl:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** true if one of the Alt keys must be down when the KeyEvent is received to be acknowledged */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	uint8 bAlt:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** true if one of the Cmd keys must be down when the KeyEvent is received to be acknowledged */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	uint8 bCmd:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Key to bind it to. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	FKey Key;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>结构体<code>FInputAxisKeyMapping</code>，其中也有两个属性<code>AxisName</code>和<code>Key</code>，分别表示的是该输入绑定的轴名称和相应按键，<code>Scale</code>属性用来给出具体值（相比于Action的离散触发，Axis则是连续的监听）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Defines a mapping between an axis and key </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="built_in">USTRUCT</span>( BlueprintType )</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FInputAxisKeyMapping</span></span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Friendly name of axis, e.g &quot;MoveForward&quot; */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	FName AxisName;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Multiplier to use for the mapping when accumulating the axis value */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	<span class="type">float</span> Scale;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Key to bind it to. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=<span class="string">&quot;Input&quot;</span>)</span><br><span class="line">	FKey Key;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个结构体中都涉及到了同一个类（结构体）——<code>FKey</code>，它的定义位于<code>InputCoreTypes</code>中，其本质就是硬件输入的定义。</p>
<p>如图，经由虚幻内部的反射机制，将属性<code>ActionMappings</code>和属性<code>AxisMappings</code>序列化到Editor里，并且可以自定义，添加映射等等。添加绑定的过程实际上就是在对ActionName/AxisName和FKey写入的过程（还有其他属性如组合按键和Scale也在Editor界面里有体现）。</p>
<p><img src="Input_ActionMappings.png" alt="" /></p>
<p>上述，基本可以描绘出游戏按键到行为的建立映射的过程，当然到这一步，我们也仅仅是将映射的概念建立起来，接下来就需要为特定的映射绑定具体的行为了，这就是InputComponent所承担的任务了。</p>
<h2 id="inputcomponent"><a class="markdownIt-Anchor" href="#inputcomponent"></a> InputComponent</h2>
<p>InputComponent直接继承自ActorComponent，对象可以对Input.ini进行写入。</p>
<p>PlayerController里是维护着一个InputComponent的栈，而核心的处理逻辑实际上都在PlayerInput里。关于这一点，后面我们会细谈。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implement an Actor component for input bindings.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * An Input Component is a transient component that enables an Actor to bind various forms of input events to delegate functions.  </span></span><br><span class="line"><span class="comment"> * Input components are processed from a stack managed by the PlayerController and processed by the PlayerInput.</span></span><br><span class="line"><span class="comment"> * Each binding can consume the input event preventing other components on the input stack from processing the input.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>(transient, config=Input, hidecategories=(Activation, <span class="string">&quot;Components|Activation&quot;</span>))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ENGINE_API</span> UInputComponent: <span class="keyword">public</span> UActorComponent</span><br></pre></td></tr></table></figure>
<h3 id="actor内的inputcomponent"><a class="markdownIt-Anchor" href="#actor内的inputcomponent"></a> Actor内的InputComponent</h3>
<p>InputComponent在Pawn和Controller上非常常见，但实际上，其实Actor上就有在维护InputComponent相关的东西：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ENGINE_API</span> AActor : <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/** If true, all input on the stack below this actor will not be considered */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditDefaultsOnly, Category=Input)</span><br><span class="line">	uint8 bBlockInput:<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/** Automatically registers this actor to receive input from a player. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, Category=Input)</span><br><span class="line">	TEnumAsByte&lt;EAutoReceiveInput::Type&gt; AutoReceiveInput;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** The priority of this input component when pushed in to the stack. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, Category=Input)</span><br><span class="line">	int32 InputPriority;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Component that handles input for this actor, if input is enabled. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(DuplicateTransient)</span><br><span class="line">	TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">UInputComponent</span>&gt; InputComponent;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Actor上序列化出来的属性如图。默认情况下，Actor是不会接收用户输入的，即按图中配置Actor是不会响应PlayerInput设定好的输入事件的，但若是希望此Actor响应用户输入的话（在此Actor上使用输入事件，并使其实时响应），则需要修改<code>AutoReceiveInput</code>的值为<code>Player0</code>。</p>
<p><img src="Input_InputOnActor.png" alt="" /></p>
<p>相应的判定代码如下，该函数是在Actor生成的时候去调用的，主要就是在关卡一级进行Actor的输入管理。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AActor::PreInitializeComponents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (AutoReceiveInput != EAutoReceiveInput::Disabled)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">const</span> int32 PlayerIndex = <span class="built_in">int32</span>(AutoReceiveInput.<span class="built_in">GetValue</span>()) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		APlayerController* PC = UGameplayStatics::<span class="built_in">GetPlayerController</span>(<span class="keyword">this</span>, PlayerIndex);</span><br><span class="line">		<span class="keyword">if</span> (PC)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">EnableInput</span>(PC);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">GetWorld</span>()-&gt;PersistentLevel-&gt;<span class="built_in">RegisterActorForAutoReceiveInput</span>(<span class="keyword">this</span>, PlayerIndex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="playercontroller内的inputstack"><a class="markdownIt-Anchor" href="#playercontroller内的inputstack"></a> PlayerController内的InputStack</h3>
<p>PlayerController间接继承自Actor，所以会有一个自己的InputComponent，但是同时负责构建和维护一个InputStack（通过Update，Push，Pop等操作）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ENGINE_API</span> APlayerController : <span class="keyword">public</span> AController</span><br><span class="line">&#123;	</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">TickPlayerInput</span><span class="params">(<span class="type">const</span> <span class="type">float</span> DeltaSeconds, <span class="type">const</span> <span class="type">bool</span> bGamePaused)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ProcessPlayerInput</span><span class="params">(<span class="type">const</span> <span class="type">float</span> DeltaTime, <span class="type">const</span> <span class="type">bool</span> bGamePaused)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildInputStack</span><span class="params">(TArray&lt;UInputComponent*&gt;&amp; InputStack)</span></span>;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/** Internal.  Current stack of InputComponents. */</span></span><br><span class="line">	TArray&lt; TWeakObjectPtr&lt;UInputComponent&gt; &gt; CurrentInputStack;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/** Refresh state specific input components */</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">UpdateStateInputComponents</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/** Adds an inputcomponent to the top of the input stack. */</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">PushInputComponent</span><span class="params">(UInputComponent* Input)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Removes given inputcomponent from the input stack (regardless of if it&#x27;s the top, actually). */</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">PopInputComponent</span><span class="params">(UInputComponent* Input)</span></span>;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>ProcessPlayerInput</code>被<code>TickPlayerInput</code>调用（<code>TickPlayerInput</code>又被PlayerTick调用，故是每帧调用），其内部首先会调用<code>BuildInputStack</code>构建输入栈，再去调用<code>PlayerInput-&gt;ProcessInputStack(InputStack, DeltaTime, bGamePaused);</code>，即使用PlayerInput来处理InputStack。</p>
<p>这样基本就构建出输入处理的流程。</p>
<p><img src="Input_InputProcessingProcedure.png" alt="" /></p>
<p>图中的InputComponent存在优先级，即如果前面一层的InputComponent接收了输入（PlayerInput在处理输入时的逻辑），那么堆栈的下方将会无法访问（不会相应输入事件），这个优先级其实就是由<code>BuildInputStack</code>构建输入栈时的压栈顺序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">APlayerController::BuildInputStack</span><span class="params">(TArray&lt;UInputComponent*&gt;&amp; InputStack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Controlled pawn gets last dibs on the input stack</span></span><br><span class="line">	APawn* ControlledPawn = <span class="built_in">GetPawnOrSpectator</span>();</span><br><span class="line">	<span class="keyword">if</span> (ControlledPawn)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ControlledPawn-&gt;<span class="built_in">InputEnabled</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// Get the explicit input component that is created upon Pawn possession. This one gets last dibs.</span></span><br><span class="line">			<span class="keyword">if</span> (ControlledPawn-&gt;InputComponent)</span><br><span class="line">			&#123;</span><br><span class="line">				InputStack.<span class="built_in">Push</span>(ControlledPawn-&gt;InputComponent);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// See if there is another InputComponent that was added to the Pawn&#x27;s components array (possibly by script).</span></span><br><span class="line">			<span class="keyword">for</span> (UActorComponent* ActorComponent : ControlledPawn-&gt;<span class="built_in">GetComponents</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				UInputComponent* PawnInputComponent = <span class="built_in">Cast</span>&lt;UInputComponent&gt;(ActorComponent);</span><br><span class="line">				<span class="keyword">if</span> (PawnInputComponent &amp;&amp; PawnInputComponent != ControlledPawn-&gt;InputComponent)</span><br><span class="line">				&#123;</span><br><span class="line">					InputStack.<span class="built_in">Push</span>(PawnInputComponent);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// LevelScriptActors are put on the stack next</span></span><br><span class="line">	<span class="keyword">for</span> (ULevel* Level : <span class="built_in">GetWorld</span>()-&gt;<span class="built_in">GetLevels</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		ALevelScriptActor* ScriptActor = Level-&gt;<span class="built_in">GetLevelScriptActor</span>();</span><br><span class="line">		<span class="keyword">if</span> (ScriptActor)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (ScriptActor-&gt;<span class="built_in">InputEnabled</span>() &amp;&amp; ScriptActor-&gt;InputComponent)</span><br><span class="line">			&#123;</span><br><span class="line">				InputStack.<span class="built_in">Push</span>(ScriptActor-&gt;InputComponent);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">InputEnabled</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		InputStack.<span class="built_in">Push</span>(InputComponent);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Components pushed on to the stack get priority</span></span><br><span class="line">	<span class="keyword">for</span> (int32 Idx=<span class="number">0</span>; Idx&lt;CurrentInputStack.<span class="built_in">Num</span>(); ++Idx)</span><br><span class="line">	&#123;</span><br><span class="line">		UInputComponent* IC = CurrentInputStack[Idx].<span class="built_in">Get</span>();</span><br><span class="line">		<span class="keyword">if</span> (IC)</span><br><span class="line">		&#123;</span><br><span class="line">			InputStack.<span class="built_in">Push</span>(IC);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			CurrentInputStack.<span class="built_in">RemoveAt</span>(Idx--);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<p>这样基本上就将Input相关的代码进行了一遍简要的梳理，其内部的细节、流程基本已经清晰明了。我们在日常编程使用时，接触最多的可能是在Pawn/Character上使用<code>SetupPlayerInputComponent</code>来进行InputComponent的配置，底层的这些流程被封装好我们基本上是看不到的。</p>
<p>有人可能会认为我做这样一番解析工作的意义不大，只要会使用就可以了。出于使用的目的话，确实如此，但是当我们希望更加明了引擎的架构，甚至范围再小一些，希望明了PlayerController，Actor等这些基础类的架构时，一点点的模块化拆解可能反而是更加聪明的做法。</p>
<p>我们当然可以仅仅看一下官方文档里的相应的介绍，但是其字里行间隐藏的机要，不真正去到代码里，只能是看个皮毛。</p>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="https://docs.unrealengine.com/5.0/en-US/input/">虚幻 5.0 Documentation - Input</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>ue5</tag>
        <tag>c++</tag>
        <tag>input</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻基础之Gameplay游戏框架之Level和World</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/</url>
    <content><![CDATA[<p>游戏中的虚拟世界是如何组织的呢？</p>
<p>这里，在玩家中流行使用一个词——关卡。玩家们进入关卡，探索关卡内的迷宫，击败关底boss，然后进入下一个关卡，周而复始。</p>
<p>在Unity3D里，这个关卡被称为是Scene，作为游戏内的一项项单独的资产而存在。这些Scene可以单独存在，也可以和其他Scene组合使用（多场景加载），同时，Scene和Scene之间又可以用SceneManager来做跳转（加载和卸载）。</p>
<p>在unreal engine里对于关卡的使用更加直白，就直接是一个个的Level，同样对于关卡本身所应该具备的逻辑操作（关卡的游玩，关卡的加载和卸载），虚幻也实现了一套架构来承载。</p>
<p>但是什么是World呢？单单用“世界”一词似乎太过简单，我们在游戏开发里做的一切——音乐、渲染、物理规则，这些所有都是为了让玩家感受到另一个不同于现实世界的世界。可以说玩家将在游戏内体会到的一切都应该是属于这个World的范畴内的。</p>
<p>虚幻本身也基本上是以这种思路来安排World的角色的，零散的Level将玩家的完整体验切割成段，所有的Level流程组合起来才成了对World的完整体验。（将World切割成一个个的Level的原因之一也是前一个时代机器性能不足而做出妥协，我们没办法把一整个游戏的所有东西全部一下子加载进来，带宽也好，内存也好。现如今出现了越来越多的开放世界游戏，正是业内的能工巧匠们利用硬件的进步和自己的各种奇思妙想来越来越妥善得解决这个问题）</p>
<span id="more"></span>
<p><ul class="markdownIt-TOC">
<li><a href="#%E7%BC%96%E8%BE%91%E5%99%A8%E5%86%85%E7%9A%84level">编辑器内的Level</a>
<ul>
<li><a href="#level%E7%9A%84%E5%88%9B%E5%BB%BA">Level的创建</a></li>
<li><a href="#level%E7%9A%84%E4%BF%9D%E5%AD%98">Level的保存</a></li>
<li><a href="#level%E7%9A%84%E6%89%93%E5%BC%80">Level的打开</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E6%B8%B8%E6%88%8F%E7%9A%84%E9%BB%98%E8%AE%A4level">设置游戏的默认Level</a></li>
<li><a href="#level%E7%9A%84%E8%B7%B3%E8%BD%AC">Level的跳转</a></li>
</ul>
</li>
<li><a href="#world%E5%A4%9Alevel%E7%9A%84%E7%AE%A1%E7%90%86">World——多Level的管理</a>
<ul>
<li><a href="#world-setting">World Setting</a></li>
<li><a href="#ulevel%E5%92%8Cuworld">ULevel和UWorld</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93%E4%B8%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%A7%84%E5%88%92">总结与未来的工作规划</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</p>
<h2 id="编辑器内的level"><a class="markdownIt-Anchor" href="#编辑器内的level"></a> 编辑器内的Level</h2>
<p>在虚幻引擎内，Level是作为一项资产而存在，也就是后缀为<code>.umap</code>的文件。也就是说，Level支持所有文件一级的操作——创建，保存，打开等等。</p>
<p>这一小节快速的罗列一下Level（或者说<code>.umap</code>文件）的基本操作和用法。</p>
<h3 id="level的创建"><a class="markdownIt-Anchor" href="#level的创建"></a> Level的创建</h3>
<p>快捷键：Ctrl + N</p>
<p>键入快捷键命令后，调出如下的窗口，ue5中给出了一些默认的关卡模板，这些模板（除了Empty Level）会提供一些关卡所需的基本内容，如基本光照环境，基本的天空球等等。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/LevelWorld_CreateLevel.png" alt="" /></p>
<p>选定模板后，点击创建即可。此时编辑器会最懂打开并加载选定的模板。</p>
<p>但是注意，此时该Level还没有被保存，资产面板中也还没有出现对应的<code>.umap</code>文件。</p>
<h3 id="level的保存"><a class="markdownIt-Anchor" href="#level的保存"></a> Level的保存</h3>
<p>快捷键：Ctrl + S</p>
<p>键入快捷命令后，调出如下窗口，这一步就是要选定<code>.umap</code>文件的命名和保存位置。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/LevelWorld_SaveLevel.png" alt="" /></p>
<p>此外，在切换当前编辑器显示的Level时，编辑器也会弹出窗口提示Level的相关保存事宜。</p>
<h3 id="level的打开"><a class="markdownIt-Anchor" href="#level的打开"></a> Level的打开</h3>
<p>快捷键：Ctrl + O</p>
<p>键入快捷命令后，调出如下窗口，其实就是相当于加了Level过滤器的资产界面，只会显示Level类型的内容。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/LevelWorld_OpenLevel.png" alt="" /></p>
<p>当然，直接在资产选择界面也可以选定相应的Level资产并且双击打开。</p>
<h3 id="设置游戏的默认level"><a class="markdownIt-Anchor" href="#设置游戏的默认level"></a> 设置游戏的默认Level</h3>
<p>我们的游戏打开时会加载哪个Level呢？总不能什么都不加载空荡荡吧？</p>
<p>相关的选项可以在Project Settings -&gt; Maps &amp; Modes -&gt; Default Maps来进行配置。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/LevelWorld_DefaultLevel.png" alt="" /></p>
<ul>
<li>Editor Startup Map定义了当打开编辑器时默认加载哪个Level，这是为了方便我们的开发编辑；</li>
<li>Editor Templete Map Overrides会去重写当我们调出创建Level的窗口时所现实的模板，我们可以将一些自己做的模板添加进去，方便开发工作；</li>
<li>Game Default Map定义了游戏的默认地图，也就回答了我们上面的那个问题，游戏开始时加载哪一个Level；</li>
<li>Transition Map定义了当我们从一个Level向另一个Level跳转时所使用的过渡地图；</li>
</ul>
<h3 id="level的跳转"><a class="markdownIt-Anchor" href="#level的跳转"></a> Level的跳转</h3>
<p>那么既然现在已经可以创建一个个的Level了，那么自然而然就会想到去做Level间的跳转，即我们游戏的主角结束一个Level的游玩后，通过某种装置或者传送门进入到另外的一个Level，这个跳转往往会需要一定的时间，甚至于某些情况下需要做一些跳转过渡画面来等候。</p>
<p>最简单的方案，可以使用GameplayStatics提供的了一个静态方法OpenLevel，可以用于进行关卡的打开。</p>
<p>可以利用TriggerBox制作一个简单的触发机制，等到玩家角色进入范围时进行关卡的跳转。</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/LevelWorld_TriggerBox.png" alt="" /></p>
<p>方法的核心部分方法的核心部分是GEngine的SetClientTravel，目前为止现在了解到这一层就足够了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UGameplayStatics::OpenLevel</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject, FName LevelName, <span class="type">bool</span> bAbsolute, FString Options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	GEngine-&gt;<span class="built_in">SetClientTravel</span>( World, *Cmd, TravelType );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="world多level的管理"><a class="markdownIt-Anchor" href="#world多level的管理"></a> World——多Level的管理</h2>
<p>从虚幻编辑器内的安排上我们似乎并不能够很好的看清World的存在，与之相关联的最直接的好像有一位World Setting的存在，那我们就先来看看World Setting里有什么内容。</p>
<h3 id="world-setting"><a class="markdownIt-Anchor" href="#world-setting"></a> World Setting</h3>
<p>World Setting面板的打开路径是Window-&gt;World Setting，其粗略内容如下：</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/LevelWorld_WorldSetting.png" alt="" /></p>
<ul>
<li>Precomputed Visibility，预先计算出的可见性。动态遮挡剔除相关的优化设置，可以为某些硬件性能较差的平台节省运行时内存的消耗，尤其是当关卡内容较少或较小时优化效果会比较好；</li>
<li>Game Mode，游戏模式。当前关卡的GameMode配置，可以覆盖掉全局设置的GameMode；</li>
<li>Lightmass，光照。当前场景的光照细节设定，主要针对静态光烘培、ao等相关内容的配置，是配置全局光照的位置；</li>
<li>World，世界。一些世界相关的配置，主要是游玩边界，寻路系统相关的内容；</li>
<li>Physics，物理。是否去覆盖全局的重力设定，以及物理碰撞的相关内容的设置；</li>
<li>World Partition，世界分区。ue5引入的新特性之一，主要负责大世界管理的相关内容，是一套全新的流式关卡管理和解决方案，相关内容我也会在后续做相关的内容提取和撰写；</li>
<li>Broadphase，Broadphase碰撞的配置选项，是NVIDIA的PhysX系统提供的特性；</li>
<li>Foliage，专门针对于世界分区中植被相关的设置，主要是划分的网格大小；</li>
<li>Navigation，关卡中寻路网格大小的相关设置；</li>
<li>VR，对VR来说单位对应相关的设置，虚幻中使用虚幻单位（Unreal Unit），该参数主要还需要参考虚拟世界构建时所使用的尺度；</li>
<li>Rendering，配置与距离场环境光遮蔽相关的以及动态间接阴影的配置；</li>
<li>Audio，设置项目中的默认音效配置，如音量、混响和渐变等；</li>
<li>Tick，Actor的Tick行为（每帧执行）的相关配置；</li>
<li>AI，AI系统的配置（开启，以及和核心类配置）；</li>
<li>Cooking，构建游戏中的其中一个过程——烘培过程的配置；</li>
</ul>
<p>从World Setting里的配置内容来看，World Setting更像是描述单个的Level的设置（而不是对整个World的配置），即如果将之成为是Level Setting也不过分。</p>
<p>事实上也的确如此，其背后原因从代码层面可以一窥端倪。</p>
<h3 id="ulevel和uworld"><a class="markdownIt-Anchor" href="#ulevel和uworld"></a> ULevel和UWorld</h3>
<p>ULevel的部分核心属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ULevel本身直接继承于UObject，所以本身也具备垃圾回收，反射，支持序列化，等等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The level object.  Contains the level&#x27;s actor list, BSP information, and brush list.</span></span><br><span class="line"><span class="comment">// Every Level has a World as its Outer and can be used as the PersistentLevel, however,</span></span><br><span class="line"><span class="comment">// when a Level has been streamed in the OwningWorld represents the World that it is a part of.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Level is a collection of Actors (lights, volumes, mesh instances etc.).</span></span><br><span class="line"><span class="comment"> * Multiple Levels can be loaded and unloaded into the World to create a streaming experience.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>(MinimalAPI)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ULevel</span> : <span class="keyword">public</span> UObject, <span class="keyword">public</span> IInterface_AssetUserData, <span class="keyword">public</span> ITextureStreamingContainer</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 前面提到了GameStatics里的OpenLevel方法，该方法的参数虽然是关卡名，</span></span><br><span class="line">	<span class="comment">// 但实际底层的SetClientTravel函数的接收的确是一个FURL类型的参数，而ULevel也维护着这样一个变量</span></span><br><span class="line">	<span class="comment">/** URL associated with this level. */</span></span><br><span class="line">	FURL					URL;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关卡本身算是Actor们的载体（集合），这里用一个容器来容纳所有的Actor元素</span></span><br><span class="line">	<span class="comment">/** Array of all actors in this level, used by FActorIteratorBase and derived classes */</span></span><br><span class="line">	TArray&lt;AActor*&gt; Actors;</span><br><span class="line">		</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 关卡也存着一枚指向所在世界的指针</span></span><br><span class="line">	<span class="comment">/** </span></span><br><span class="line"><span class="comment">	 * The World that has this level in its Levels array. </span></span><br><span class="line"><span class="comment">	 * This is not the same as GetOuter(), because GetOuter() for a streaming level is a vestigial world that is not used. </span></span><br><span class="line"><span class="comment">	 * It should not be accessed during BeginDestroy(), just like any other UObject references, since GC may occur in any order.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Transient)</span><br><span class="line">	TObjectPtr&lt;UWorld&gt; OwningWorld;</span><br><span class="line">			</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 关卡蓝图（level blueprint），也对应着我们可以在编辑器内打开的那个关卡蓝图，</span></span><br><span class="line">	<span class="comment">// 它本身是一个ALevelScriptActor，继承自Actor，所以拥有着Actor的大部分特性（包括接收输入等）</span></span><br><span class="line">	<span class="comment">// 自然地，既然是Actor，LevelScriptActor也包含在上面Actors数组里</span></span><br><span class="line">	<span class="comment">/** The level scripting actor, created by instantiating the class from LevelScriptBlueprint.  This handles all level scripting */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(NonTransactional)</span><br><span class="line">	TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">ALevelScriptActor</span>&gt; LevelScriptActor;</span><br><span class="line">			</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">// 关卡中保存着WorldSettings的一枚指针，正是前面编辑器中的那个World Setting</span></span><br><span class="line">	<span class="comment">// 自然地，既然是Actor，WorldSettings也包含在上面Actors数组里</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	TObjectPtr&lt;AWorldSettings&gt; WorldSettings;</span><br><span class="line">				</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Actor是我们已经比较熟悉的类，现在我们知道LevelBlueprint本身也是Actor，这也是属于“不可见的”Actor之一。</p>
<p>而LevelScriptActor直接继承自Actor，当然在Actor基础上，做了一定的补充和修改，比如说关于渲染和碰撞等，但是又允许继承自Actor的输入相关的接收等，我们在蓝图中使用时基本上就按Actor的理解来写即可。</p>
<p>WorldSetting则是继承自AInfo（也就是常见的允许存在于），不同于那些可以拖进编辑器场景中的，AInfo就是那类为场景做贡献但是不需要进入到场景中的Actor。</p>
<p>这一部分代码的阅读也着重参考了大钊的文章（参考文底连接）：</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/LevelWorld_ULevelStructure.png" alt="" /></p>
<p>除了其他零零碎碎的成员，还有一个比较关键的就是OwningWorld指针，它指向该关卡所属的UWorld对象。</p>
<p>UWorld的部分核心属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相较于Level，World更像是一个管理者，Level的管理者</span></span><br><span class="line"><span class="comment">// Level在它上面可以自由组合，可以流式加载，从而作为更庞大的世界的基础</span></span><br><span class="line"><span class="comment">// 而且最重要的，World同样可以不只有一个，游戏的世界，编辑器的世界，PIE实例世界等等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * The World is the top level object representing a map or a sandbox in which Actors and Components will exist and be rendered.  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A World can be a single Persistent Level with an optional list of streaming levels that are loaded and unloaded via volumes and blueprint functions</span></span><br><span class="line"><span class="comment"> * or it can be a collection of levels organized with a World Composition.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * In a standalone game, generally only a single World exists except during seamless area transitions when both a destination and current world exists.</span></span><br><span class="line"><span class="comment"> * In the editor many Worlds exist: The level being edited, each PIE instance, each editor tool which has an interactive rendered viewport, and many more.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(customConstructor, config=Engine)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ENGINE_API</span> UWorld <span class="keyword">final</span> : <span class="keyword">public</span> UObject, <span class="keyword">public</span> FNetworkNotify</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// PersistantLevel将是我们后面一个小节的核心内容之一，也可以看作所谓的主关卡</span></span><br><span class="line">	<span class="comment">// 其主要作用体现在关卡的流式管理（Level Streaming）中</span></span><br><span class="line">	<span class="comment">// 它本身的话代表了当前世界中的核心关卡（代表着当多关卡之间的设置有冲突时，优先以PersistantLevel为依据）</span></span><br><span class="line">	<span class="comment">/** Persistent level containing the world info, default brush and actors spawned during gameplay among other things			*/</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Transient)</span><br><span class="line">	TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">ULevel</span>&gt;								PersistentLevel; </span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 相对于PersistantLevel，就会有StreamingLevels，表示那些动态加载和卸载的关卡们</span></span><br><span class="line">	<span class="comment">// PersistantLevel只有一个，而StreamingLevels的数量就很灵活了</span></span><br><span class="line">	<span class="comment">/** Level collection. ULevels are referenced by FName (Package name) to avoid serialized references. Also contains offsets in world units */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Transient)</span><br><span class="line">	TArray&lt;TObjectPtr&lt;ULevelStreaming&gt;&gt; StreamingLevels;</span><br><span class="line">		</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 世界的类型</span></span><br><span class="line">	<span class="comment">/** The type of world this is. Describes the context in which it is being used (Editor, Game, Preview etc.) */</span></span><br><span class="line">	TEnumAsByte&lt;EWorldType::Type&gt; WorldType;</span><br><span class="line">		</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 当前的GameMode，当有多个关卡加载到世界中时，对应也会有多个World Setting</span></span><br><span class="line">	<span class="comment">// 那么以哪个配置为准呢，这里负责维护着对应的指针</span></span><br><span class="line">	<span class="comment">/** The current GameMode, valid only on the server */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Transient)</span><br><span class="line">	TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">AGameModeBase</span>&gt;						AuthorityGameMode;</span><br><span class="line">			</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 同上</span></span><br><span class="line">	<span class="comment">/** The replicated actor which contains game state information that can be accessible to clients. Direct access is not allowed, use GetGameState&lt;&gt;() */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Transient)</span><br><span class="line">	TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">AGameStateBase</span>&gt;						GameState;</span><br><span class="line">				</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 世界就是关卡的集合，这里就是关卡们组成的数组</span></span><br><span class="line">	<span class="comment">/** Array of levels currently in this world. Not serialized to disk to avoid hard references. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Transient)</span><br><span class="line">	TArray&lt;TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">ULevel</span>&gt;&gt;						Levels;</span><br><span class="line">				</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// PersistentLevel和CurrentLevel只是个快速引用。</span></span><br><span class="line">	<span class="comment">// 在编辑器里编辑的时候，CurrentLevel可以指向其他Level，但运行时CurrentLevel只能是指向PersistentLevel。</span></span><br><span class="line">	<span class="comment">/** Pointer to the current level being edited. Level has to be in the Levels array and == PersistentLevel in the game. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Transient)</span><br><span class="line">	TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">ULevel</span>&gt;								CurrentLevel;</span><br><span class="line">					</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 该World所从属的GameInstance</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Transient)</span><br><span class="line">	TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">UGameInstance</span>&gt;						OwningGameInstance;</span><br></pre></td></tr></table></figure>
<p>这部分代码的阅读同样参考了大钊的文章：</p>
<p><img src="%E8%99%9A%E5%B9%BB%E5%9F%BA%E7%A1%80%E4%B9%8BGameplay%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E4%B9%8BLevel%E5%92%8CWorld/LevelWorld_WolrdLevelRelation.png" alt="" /></p>
<h2 id="总结与未来的工作规划"><a class="markdownIt-Anchor" href="#总结与未来的工作规划"></a> 总结与未来的工作规划</h2>
<p>本文从使用层面总结了Level的基础用法，从编辑器层面罗列了Level和World相关的配置选项，还从代码层面了解几个核心类（Level，World等）之间的架构关系。</p>
<p>其中尤其，从Level和World的代码中，可以清晰得看到Level是如何承载Actor的（包括一些看不见的Actor），看到World的组成又是怎样的。当然虚幻中这两者的应用远不止于此，这篇文章仅仅算是将Level和World相关内容破了个题，相关的内容还有World是如何组织Level的——Level Streaming相关内容，大世界相关的优化问题——World Composition和World Partition相关的配置，等等。</p>
<p>本文更多的是对几个基本概念进行拆解，对代码结构有一个基本的认识，在此基础之上，还会再跟进Level Streaming、World Composition和World Partition相关的内容和文章。</p>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="https://docs.unrealengine.com/5.0/en-US/levels-in-unreal-engine/">虚幻 5.0 Documentation - Levels</a></p>
<p><a href="https://docs.unrealengine.com/5.0/en-US/level-streaming-in-unreal-engine/">虚幻 5.0 Documentation - Level Streaming</a></p>
<p><a href="https://docs.unrealengine.com/5.0/en-US/world-partition-in-unreal-engine/">虚幻 5.0 Documentation - World Partition</a></p>
<p><a href="https://docs.unrealengine.com/5.0/en-US/gameplay-framework-in-unreal-engine/">虚幻 5.0 Documentation - Gameplay Framework</a></p>
<p>知乎作者 大钊 的文章<a href="https://zhuanlan.zhihu.com/p/22924838">《InsideUE4 GamePlay架构（二）Level和World》</a></p>
<p>b站虚幻引擎官方视频<a href="https://www.bilibili.com/video/BV1xx411h7Aa">《Getting Started with World Composition》</a></p>
<p>虚幻英文直播<a href="https://www.bilibili.com/video/BV1Py4y177ZS">《世界构建新功能 | New World Building Features》</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>C++</tag>
        <tag>Level</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻5新特性之EnhancedInput</title>
    <url>/2022/04/12/%E8%99%9A%E5%B9%BB5%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BEnhancedInput/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="375f3251e49765dede40f4c2a42d899f85d3e706d49e288a5db0994db4f00850"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入邀请码阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>Gameplay</tag>
        <tag>Input</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 112 路径总和</title>
    <url>/2022/04/12/LeetCode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E9%80%92%E5%BD%92">递归</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。
</font>
<font color=#999AAA >
叶子节点 是指没有子节点的节点。
</font>
<ul>
<li>示例 1：<br />
输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22<br />
输出：true<br />
解释：等于目标和的根节点到叶节点路径如上图所示。</li>
<li>示例 2：<br />
输入：root = [1,2,3], targetSum = 5<br />
输出：false<br />
解释：树中存在两条根节点到叶子节点的路径：<br />
(1 --&gt; 2): 和为 3<br />
(1 --&gt; 3): 和为 4<br />
不存在 sum = 5 的根节点到叶子节点的路径。</li>
<li>示例 3：<br />
输入：root = [], targetSum = 0<br />
输出：false<br />
解释：由于树是空的，所以不存在根节点到叶子节点的路径。</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/path-sum">https://leetcode-cn.com/problems/path-sum</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h2>
<p>先将问题简化，看看最简单的情况：</p>
<p>树为空，即根节点为空，那么自然返回false；</p>
<p>树只有根节点，即根节点的左右子树全为空，那么就判断根节点的值和目标值是否相等即可；</p>
<p>再进一步，根节点的左右子树不为空，那么就分别去找左右子树，看看其值是否等于目标值减去根节点所得到的值。</p>
<p>依照这个思路得出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> targetSum == root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hasPathSum</span>(root-&gt;left, targetSum - root-&gt;val) ||     <span class="built_in">hasPathSum</span>(root-&gt;right, targetSum - root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="LeetCode112_result.png" alt="" /></p>
<p>复杂度分析<br />
时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度：开辟辅助数组所出现的消耗，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻插件之MultiplayerMissionSystem</title>
    <url>/2022/04/10/%E8%99%9A%E5%B9%BB%E6%8F%92%E4%BB%B6%E4%B9%8BMultiplayerMissionSystem/</url>
    <content><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2>
<p>任务系统是串联游戏，为游戏提供强力游玩驱动的有效手段之一， 在传统RPG等游戏中有着非常广泛的应用。<br />
任务系统编辑器的意义就在于能够为创作者提供直观的非代码的界面，使其能够快速的创建一个又一个的任务并合理得安排其顺序或者逻辑， 并且在引擎的帮助下能够快速预览其效果。<br />
本文将就Mission System任务编辑系统，介绍任务编辑涉及到的核心内容。</p>
<span id="more"></span>
<p>（注：本文主要是对任务系统中涉及到的概念进行拆解，结合插件内容演示任务的定义、提示、开始、完成以及日志等等。同时，需要认识到，目前该系统是基于RPG类型游戏进行了高度的定制，所以任务的制作中包含了一定量的RPG要素，如经验等级）</p>
<h2 id="资源获取"><a class="markdownIt-Anchor" href="#资源获取"></a> 资源获取</h2>
<p><a href="https://www.unrealengine.com/marketplace/zh-CN/product/multiplayer-mission-system">https://www.unrealengine.com/marketplace/zh-CN/product/multiplayer-mission-system</a></p>
<p>本文使用的版本是4.26，其他版本可以自行编译使用。</p>
<h2 id="快速上手"><a class="markdownIt-Anchor" href="#快速上手"></a> 快速上手</h2>
<p>本小节内容是为了让读者快速上手使用该系统来进行任务的制作。<br />
本文不包含资源的安装，这里假定读者已经安装成功。</p>
<h3 id="输入模块"><a class="markdownIt-Anchor" href="#输入模块"></a> 输入模块</h3>
<p>输入部分，系统使用了第三人称的模板，所以基本的移动可以参照第三人称模板来操作；此外，还进行了三项操作的扩充——攻击、交互和呼出任务面板；攻击对应鼠标左键，交互对应键盘E建，呼出任务面板对应键盘Tab键。这些按键响应都是实现于PlayerController，并通过核心任务组件（BP_MissionComponent）中定义的事件来作响应。<br />
（注：任务管理器组件也可以挂载在任何位置，但是为了方便访问及网络复制Replication，放在PlayerController上是一个推荐的选择）</p>
<p><img src="MissionSystem_InputResponse.png" alt="" /></p>
<p>UMG的输入提示：</p>
<p><img src="MissionSystem_InputTips.png" alt="" /></p>
<h3 id="任务制定"><a class="markdownIt-Anchor" href="#任务制定"></a> 任务制定</h3>
<p>DT_Missions（Data Table资产）是用来创建、配置和维护任务的核心资产，其本质上是一个数据表，可以直接增加或删除任务（Mission）。Mission代表着一个大的阶段性任务，比如新手教学就可以作为一个任务存在：</p>
<p><img src="MissionSystem_DTMissions.png" alt="" /></p>
<p>其中，除了Mission名称（Name）之外，还可以配置任务是否是可以重复的（Repeatable，影响着任务是否可以重复接取），任务的具体描述（Description，可以反映到UMG上），需要的玩家等级（Level），任务子序列（Sequence），任务完成后的收益（Finished，经验收益以及新增任务等）。</p>
<h3 id="任务拆解"><a class="markdownIt-Anchor" href="#任务拆解"></a> 任务拆解</h3>
<p>假定在新手任务（Startup Mission）中，玩家需要根据指引探索区域，与机关交互解锁新的区域，最后完成新手的简单战斗。根据前文的描述可以将任务差分为三个子任务序列（序列代表着任务之间有着相对顺序，即完成任务一才可以去继续完成任务二，而不可以顺序颠倒）。<br />
将所有子任务序列及其描述依次进行配置（sequence time是任务的限制时间，超时未完成将导致任务失败）：</p>
<p><img src="MissionSystem_Sequences.png" alt="" /></p>
<p>UMG中的子任务序列显示：</p>
<p><img src="MissionSystem_SequenceInUMG.png" alt="" /></p>
<p>Objectives代表了当前子任务序列的目标，即它定义了玩家当前任务的主要玩法。如可以定义玩家的当前任务目标为探索寻路（follow）：</p>
<p><img src="MissionSystem_Objectives.png" alt="" /></p>
<p>其中WidgeType描述了当前任务的UMG展现形式：</p>
<p><img src="MissionSystem_WidgeType.png" alt="" /></p>
<p>对于探索寻路任务（follow），可以使用检查点（Checkpoint）来定义要去的地方（主要是定义一些检查点的核心属性，如显示规则，位置及UI外观等）。<br />
而对于其他任务来说，就需要用到Objective Targets。其中需要自己去添加相应的Target Actor来定义具体的规则，及对应的Actor上需要添加BP_TargetComponent组件，如与特定机关交互的Actor：</p>
<p><img src="MissionSystem_TargetComponent.png" alt="" /></p>
<p>如需要进行击杀的Actor：</p>
<p><img src="MissionSystem_EnemyTargetComponent.png" alt="" /></p>
<h3 id="任务切换"><a class="markdownIt-Anchor" href="#任务切换"></a> 任务切换</h3>
<p>在配置表的最后，当任务完成时，可以配置经验奖励，以及在任务列表里新增的任务，该任务依然可以通过ID查找任务表里的其他任务来实现。</p>
<p><img src="MissionSystem_MissionSwitch.png" alt="" /></p>
<h3 id="任务开始"><a class="markdownIt-Anchor" href="#任务开始"></a> 任务开始</h3>
<p>任务的控制是在任务管理器（BP_MissionComponent）中进行的，可以利用BP_MissionComponent组件方便得进行任务的控制。</p>
<p><img src="MissionSystem_MissionEvent.png" alt="" /></p>
<p>可以简单得在PlayerControler里在BeginPlay时开始之前配置好的任务：</p>
<p><img src="MissionSystem_StartMission.png" alt="" /></p>
<h3 id="接入umg"><a class="markdownIt-Anchor" href="#接入umg"></a> 接入UMG</h3>
<p>BP_MissionComponent中管理着所有的任务数据和日志，包括完成的，未完成的，成功的，失败的，等等。UMG可以方便得访问运行时的任务数据，并予以显示：</p>
<p><img src="MissionSystem_UMGGlobal.png" alt="" /></p>
<p><img src="MissionSystem_UMGLog.png" alt="" /></p>
<h2 id="演示"><a class="markdownIt-Anchor" href="#演示"></a> 演示</h2>
<p><a href="https://www.bilibili.com/video/BV1XY411777M">演示Demo</a></p>
]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>插件</tag>
        <tag>任务系统</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻5新特性之GameFeature</title>
    <url>/2022/04/08/%E8%99%9A%E5%B9%BB5%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BGameFeature/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3a2a77867c312dec004b2c52918e1e8a8438362fced4174dd8a0aaa76619b5e6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入邀请码阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>虚幻</category>
      </categories>
      <tags>
        <tag>UE5</tag>
        <tag>Gameplay</tag>
      </tags>
  </entry>
  <entry>
    <title>虚幻编程准备之 宏定义的语法</title>
    <url>/2022/04/07/%E8%99%9A%E5%B9%BB%E7%BC%96%E7%A8%8B%E5%87%86%E5%A4%87%E4%B9%8B-%E5%AE%8F%E5%AE%9A%E4%B9%89%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>虚幻编程要面对的很大一部分代码都是用宏来书写的，包括整个虚幻的反射机制也是由宏来支撑的。</p>
<p>这里对宏来做一个简单的用法总结，主要还是针对C++和C的宏语法。</p>
<span id="more"></span>
<p><ul class="markdownIt-TOC">
<li><a href="#%E6%9C%80%E7%AE%80%E5%BD%A2%E5%BC%8F%E7%9A%84%E5%AE%8F">最简形式的宏</a>
<ul>
<li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li>
<li><a href="#%E8%BE%93%E5%87%BA">输出</a></li>
</ul>
</li>
<li><a href="#%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%8F%E5%8D%95%E5%8F%82%E6%95%B0">带参数的宏(单参数)</a>
<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-2">定义</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-2">使用</a></li>
<li><a href="#%E8%BE%93%E5%87%BA-2">输出</a></li>
</ul>
</li>
<li><a href="#%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%8F%E5%A4%9A%E5%8F%82%E6%95%B0">带参数的宏(多参数)</a>
<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-3">定义</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-3">使用</a></li>
<li><a href="#%E8%BE%93%E5%87%BA-3">输出</a></li>
</ul>
</li>
<li><a href="#%E6%8D%A2%E8%A1%8C">换行</a>
<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-4">定义</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-4">使用</a></li>
<li><a href="#%E8%BE%93%E5%87%BA-4">输出</a></li>
</ul>
</li>
<li><a href="#%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8">#号的使用</a>
<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-5">定义</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-5">使用</a></li>
<li><a href="#%E8%BE%93%E5%87%BA-5">输出</a></li>
</ul>
</li>
<li><a href="#%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8-2">##号的使用</a>
<ul>
<li><a href="#%E5%AE%9A%E4%B9%89-6">定义</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-6">使用</a></li>
<li><a href="#%E8%BE%93%E5%87%BA-6">输出</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E7%BD%AE%E7%9A%84%E5%AE%8F">内置的宏</a>
<ul>
<li><a href="#%E5%88%97%E4%B8%BE">列举</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-7">使用</a></li>
<li><a href="#%E8%BE%93%E5%87%BA-7">输出</a></li>
</ul>
</li>
</ul>
</p>
<h2 id="最简形式的宏"><a class="markdownIt-Anchor" href="#最简形式的宏"></a> 最简形式的宏</h2>
<h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> pi 3.14</span></span><br></pre></td></tr></table></figure>
<h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">funcSampleMacro</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> pi * <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">31.4</span></span><br></pre></td></tr></table></figure>
<h2 id="带参数的宏单参数"><a class="markdownIt-Anchor" href="#带参数的宏单参数"></a> 带参数的宏(单参数)</h2>
<h3 id="定义-2"><a class="markdownIt-Anchor" href="#定义-2"></a> 定义</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> func(x) (x * 2)</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-2"><a class="markdownIt-Anchor" href="#使用-2"></a> 使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">funcParamerizedMacro</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">func</span>(<span class="number">3.14</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出-2"><a class="markdownIt-Anchor" href="#输出-2"></a> 输出</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">6.28</span></span><br></pre></td></tr></table></figure>
<h2 id="带参数的宏多参数"><a class="markdownIt-Anchor" href="#带参数的宏多参数"></a> 带参数的宏(多参数)</h2>
<h3 id="定义-3"><a class="markdownIt-Anchor" href="#定义-3"></a> 定义</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TEST(...) t(##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">t</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用-3"><a class="markdownIt-Anchor" href="#使用-3"></a> 使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">t</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b, <span class="type">float</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">t</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">funcMultiParaMacro</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">TEST</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//float funcMultiParaMacro()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	return TEST(1, 2);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="输出-3"><a class="markdownIt-Anchor" href="#输出-3"></a> 输出</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="换行"><a class="markdownIt-Anchor" href="#换行"></a> 换行</h2>
<h3 id="定义-4"><a class="markdownIt-Anchor" href="#定义-4"></a> 定义</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Wrap(functionName) float functionName()\</span></span><br><span class="line"><span class="meta">&#123;\</span></span><br><span class="line"><span class="meta">	return 3.14;\</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-4"><a class="markdownIt-Anchor" href="#使用-4"></a> 使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Wrap</span>(unnamed)</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">funcWrapMacro</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">unnamed</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出-4"><a class="markdownIt-Anchor" href="#输出-4"></a> 输出</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure>
<h2 id="号的使用"><a class="markdownIt-Anchor" href="#号的使用"></a> #号的使用</h2>
<p><code>#</code> 用来转化字符串</p>
<h3 id="定义-5"><a class="markdownIt-Anchor" href="#定义-5"></a> 定义</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TOSTRING(x) #x</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-5"><a class="markdownIt-Anchor" href="#使用-5"></a> 使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">funcToStringMacro</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">TOSTRING</span>(hello world);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出-5"><a class="markdownIt-Anchor" href="#输出-5"></a> 输出</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h2 id="号的使用-2"><a class="markdownIt-Anchor" href="#号的使用-2"></a> ##号的使用</h2>
<p><code>##</code> 用来拼接</p>
<h3 id="定义-6"><a class="markdownIt-Anchor" href="#定义-6"></a> 定义</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> COMBINE(x,y) x##y</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-6"><a class="markdownIt-Anchor" href="#使用-6"></a> 使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">funcCombineMacro</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">COMBINE</span>(func, <span class="built_in">ToStringMacro</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出-6"><a class="markdownIt-Anchor" href="#输出-6"></a> 输出</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h2 id="内置的宏"><a class="markdownIt-Anchor" href="#内置的宏"></a> 内置的宏</h2>
<h3 id="列举"><a class="markdownIt-Anchor" href="#列举"></a> 列举</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__FILE__</span><br><span class="line">__LINE__</span><br><span class="line">__DATE__</span><br><span class="line">__TIME__</span><br><span class="line">__FUNCTION__</span><br></pre></td></tr></table></figure>
<h3 id="使用-7"><a class="markdownIt-Anchor" href="#使用-7"></a> 使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">funcBuildInMacro</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; __FILE__ &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; __LINE__ &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; __DATE__ &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; __TIME__ &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; __FUNCTION__ &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出-7"><a class="markdownIt-Anchor" href="#输出-7"></a> 输出</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">E:\Project\CppResearchLoc\CppResearch\MacroResearch\Commen.h</span><br><span class="line"><span class="number">66</span></span><br><span class="line">Apr  <span class="number">7</span> <span class="number">2022</span></span><br><span class="line"><span class="number">16</span>:<span class="number">36</span>:<span class="number">28</span></span><br><span class="line">funcBuildInMacro</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>宏</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 111 二叉树的最小深度</title>
    <url>/2022/04/06/LeetCode-111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E9%80%92%E5%BD%92">深度优先搜索（递归）</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
 <font color=#999AAA >
给定一个二叉树，找出其最小深度。
</font>
<font color=#999AAA >
最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
</font>
<font color=#999AAA >
说明：叶子节点是指没有子节点的节点。
</font>
<ul>
<li>示例 1：<br />
输入：root = [3,9,20,null,null,15,7]<br />
输出：2</li>
<li>示例 2：<br />
输入：root = [2,null,3,null,4,null,5,null,6]<br />
输出：5</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree">https://leetcode-cn.com/problems/minimum-depth-of-binary-tree</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="深度优先搜索递归"><a class="markdownIt-Anchor" href="#深度优先搜索递归"></a> 深度优先搜索（递归）</h2>
<p>该题目的重点是理解题意，为何“最近叶子节点”？叶子节点是树中某个左右子树均为空的节点，即只要只要该节点左右子树中某一个不为空的话，该节点即为叶子节点。此时可以依据情况具体讨论：</p>
<ul>
<li>当该节点为空时，该节点到最近叶子节点的距离为0；</li>
<li>当该节点的左右子树均为空时，该节点到最近叶子节点的距离为1；</li>
<li>当该节点的左右子树中其中一个为空另一个不为空时，该节点到最近叶子节点的距离为不为空的子树节点到其最近叶子节点的距离 + 1；</li>
<li>当该节点的左右子树均不为空时，该节点到最近叶子节点的距离为两个子树节点中距其最近叶子节点的较小者再 + 1；</li>
</ul>
<p>如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> || root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">minDepth</span>(root-&gt;left) + <span class="built_in">minDepth</span>(root-&gt;right) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;left),<span class="built_in">minDepth</span>(root-&gt;right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/f6ab59ccb7d64b599de68a54ed75baba.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span>，h为二叉树的高度</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 104 二叉树的最大深度</title>
    <url>/2022/04/05/LeetCode-104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88">深度优先</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个二叉树，找出其最大深度。
</font>
<font color=#999AAA >
二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
</font>
<font color=#999AAA >
说明: 叶子节点是指没有子节点的节点。
</font>
<ul>
<li>示例：<br />
给定二叉树 [3,9,20,null,null,15,7]，<br />
返回它的最大深度 3 。</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="深度优先"><a class="markdownIt-Anchor" href="#深度优先"></a> 深度优先</h2>
<p>当前节点的最大深度就是左右子树中深度较大者再加上1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left), <span class="built_in">maxDepth</span>(root-&gt;right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/f558609051e24295838510b34d78197d.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(height)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>，height表示树的高度，最大可能是n</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 101 对称二叉树</title>
    <url>/2022/04/05/LeetCode-101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E9%80%92%E5%BD%92">递归</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你一个二叉树的根节点 root ， 检查它是否轴对称。
</font>
<ul>
<li>示例 1：<br />
输入：root = [1,2,2,3,4,4,3]<br />
输出：true</li>
<li>示例 2：<br />
输入：root = [1,2,2,null,3,null,3]<br />
输出：false</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/symmetric-tree">https://leetcode-cn.com/problems/symmetric-tree</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">check</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(TreeNode* left, TreeNode* right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">nullptr</span> &amp;&amp; right == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">nullptr</span> || right == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left-&gt;val == right-&gt;val &amp;&amp;  <span class="built_in">check</span>(left-&gt;left, right-&gt;right) &amp;&amp; <span class="built_in">check</span>(left-&gt;right, right-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/10cd49e251a245018bb99f5ade67d0f1.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 100 相同的树</title>
    <url>/2022/04/05/LeetCode-100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E9%80%92%E5%BD%92">深度优先搜索（递归）</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。
</font>
<font color=#999AAA >
如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
</font>
<ul>
<li>示例 1：<br />
输入：p = [1,2,3], q = [1,2,3]<br />
输出：true</li>
<li>示例 2：<br />
输入：p = [1,2], q = [1,null,2]<br />
输出：false</li>
<li>示例 3：<br />
输入：p = [1,2,1], q = [1,1,2]<br />
输出：false</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/same-tree">https://leetcode-cn.com/problems/same-tree</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="深度优先搜索递归"><a class="markdownIt-Anchor" href="#深度优先搜索递归"></a> 深度优先搜索（递归）</h2>
<p>先试着想想如何判断其中某个节点是否相等：判断其值是否相等 &amp;&amp; 判断其左子节点的值是否相等 &amp;&amp; 判断其右子节点的值是否相等。其中当要判断的两者中某个节点为空时，或者都为空时，可以不用判断相等而提前进行判断。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">nullptr</span> &amp;&amp; q == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="literal">nullptr</span> || q == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;val != q-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isSameTree</span>(p-&gt;left, q-&gt;left) &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;right,q-&gt;right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/274003d717384a2f82c989cd6e5345fd.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(min(m,n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，取决于两树中最小的那个的大小<br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(min(m,n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 94 二叉树的中序遍历</title>
    <url>/2022/04/05/LeetCode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E9%80%92%E5%BD%92">递归</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个二叉树的根节点 root ，返回它的 中序 遍历。
</font>
<ul>
<li>示例 1：<br />
输入：root = [1,null,2,3]<br />
输出：[1,3,2]</li>
<li>示例 2：<br />
输入：root = []<br />
输出：[]</li>
<li>示例 3：<br />
输入：root = [1]<br />
输出：[1]</li>
<li>示例 4：<br />
输入：root = [1,2]<br />
输出：[2,1]</li>
<li>示例 5：<br />
输入：root = [1,null,2]<br />
输出：[1,2]</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal">https://leetcode-cn.com/problems/binary-tree-inorder-traversal</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h2>
<p>中序遍历是左中右，即左子节点-&gt;当前节点-&gt;右子节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">recurve</span>(root, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recurve</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">recurve</span>(root-&gt;left, v);</span><br><span class="line">        v.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">recurve</span>(root-&gt;right, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/30d5641c3f124aaf8d4d9c438c5cde91.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，遍历节点的复杂度<br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，用分配空间存储结果，同时也需要分配相应的递归栈。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 88 合并两个有序数组</title>
    <url>/2022/04/05/LeetCode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%8F%8C%E6%8C%87%E9%92%88">双指针</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
</font>
<font color=#999AAA >
请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
</font>
<font color=#999AAA >
注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。
</font>
<ul>
<li>示例 1：<br />
输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3<br />
输出：[1,2,2,3,5,6]<br />
解释：需要合并 [1,2,3] 和 [2,5,6] 。<br />
合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</li>
<li>示例 2：<br />
输入：nums1 = [1], m = 1, nums2 = [], n = 0<br />
输出：[1]<br />
解释：需要合并 [1] 和 [] 。<br />
合并结果是 [1] 。</li>
<li>示例 3：<br />
输入：nums1 = [0], m = 0, nums2 = [1], n = 1<br />
输出：[1]<br />
解释：需要合并的数组是 [] 和 [1] 。<br />
合并结果是 [1] 。<br />
注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/merge-sorted-array">https://leetcode-cn.com/problems/merge-sorted-array</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="双指针"><a class="markdownIt-Anchor" href="#双指针"></a> 双指针</h2>
<p>利用两个指针分别遍历两个数组，比较指向的数据的大小，直到其中一方遍历完成，再把剩余数据填充完整即可。这里需要借助辅助数组空间。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nums1_index = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> nums2_index = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vtemp</span><span class="params">(m+n)</span></span>;</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="keyword">while</span> (nums1_index &lt; m || nums2_index &lt; n) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1_index == m) </span><br><span class="line">            &#123;</span><br><span class="line">                cur = nums2[nums2_index++];</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums2_index == n) </span><br><span class="line">            &#123;</span><br><span class="line">                cur = nums1[nums1_index++];</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums1[nums1_index] &lt; nums2[nums2_index]) </span><br><span class="line">            &#123;</span><br><span class="line">                cur = nums1[nums1_index++];</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                cur = nums2[nums2_index++];</span><br><span class="line">            &#125;</span><br><span class="line">            vtemp[nums1_index + nums2_index - <span class="number">1</span>] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != m + n; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            nums1[i] = vtemp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/0e6e0fc1d200457b88a2d5e22829fee8.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m+n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，遍历的代价<br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m+n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，辅助数据空间的代价</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 83 删除排序链表中的重复元素</title>
    <url>/2022/04/05/LeetCode-83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%8F%8C%E6%8C%87%E9%92%88%E9%81%8D%E5%8E%86">双指针遍历</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。
</font>
<ul>
<li>
<p>示例 1：<br />
输入：head = [1,1,2]<br />
输出：[1,2]</p>
</li>
<li>
<p>示例 2：<br />
输入：head = [1,1,2,3,3]<br />
输出：[1,2,3]</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="双指针遍历"><a class="markdownIt-Anchor" href="#双指针遍历"></a> 双指针遍历</h2>
<p>用一个指针pre指向前一个节点，然后用另一个指针cur进行链表的遍历，当cur的值和pre的值相同时，进行链表节点的删除。当cur指针为空时，说明遍历进行到了链表的结尾。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* pre = head;</span><br><span class="line">        ListNode* cur = head-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;val == pre-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">                pre-&gt;next = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/e67b92d80e834fdbacb2e746d76feda9.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>链表</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 70 爬楼梯</title>
    <url>/2022/04/05/LeetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E9%80%92%E5%BD%92">递归</a></li>
<li><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
</font>
<font color=#999AAA >
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
</font>
<ul>
<li>示例 1：<br />
输入：n = 2<br />
输出：2<br />
解释：有两种方法可以爬到楼顶。</li>
</ul>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶</li>
</ol>
<ul>
<li>示例 2：<br />
输入：n = 3<br />
输出：3<br />
解释：有三种方法可以爬到楼顶。</li>
</ul>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/climbing-stairs">https://leetcode-cn.com/problems/climbing-stairs</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h2>
<p>每一层楼梯，基本都有两种方式可以到达：从前一阶过来，或者从前两阶过来。如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">climbStairs</span>(n<span class="number">-1</span>) + <span class="built_in">climbStairs</span>(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是，爆栈了。<br />
<img src="https://img-blog.csdnimg.cn/d7d6a1363ca241bc91d94ac06f7a4320.png" alt="在这里插入图片描述" /></p>
<h2 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h2>
<p>先预先分配好内存，将求取的值存入到内存中，直到找到目标值对应的数目。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        v[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        v[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        v[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">3</span>; i &lt; n + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v[i] = v[i<span class="number">-1</span>] + v[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2a9c86691e844d9e9b03bb365eddddf4.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>递归</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 69 x的平方根</title>
    <url>/2022/04/05/LeetCode-69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE">暴力枚举</a></li>
<li><a href="#%E4%BA%8C%E5%88%86%E6%B3%95">二分法</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你一个非负整数 x ，计算并返回 x 的 算术平方根 。
</font> 
<font color=#999AAA >
由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。
</font> 
<font color=#999AAA >
注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。
</font> 
<ul>
<li>示例 1：<br />
输入：x = 4<br />
输出：2</li>
<li>示例 2：<br />
输入：x = 8<br />
输出：2<br />
解释：8 的算术平方根是 2.82842…, 由于返回类型是整数，小数部分将被舍去。</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/sqrtx">https://leetcode-cn.com/problems/sqrtx</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="暴力枚举"><a class="markdownIt-Anchor" href="#暴力枚举"></a> 暴力枚举</h2>
<p>已知x是非负整数，那么一定有要求的平方根小于x，所以可以从0开始遍历，直到找到平方后大于x的值，再在这个值上减去1即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> seed = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="type">long</span> <span class="type">long</span>)seed * seed &lt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            seed ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> seed - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/10cd7c75f6b545eda47b5d25c9daaf98.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，从0到x遍历<br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<h2 id="二分法"><a class="markdownIt-Anchor" href="#二分法"></a> 二分法</h2>
<p>从暴力枚举出发进行优化，利用二分法找目标值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = x;</span><br><span class="line">        <span class="type">int</span> seed = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span> <span class="type">long</span>)mid * mid &lt;= x) </span><br><span class="line">            &#123;</span><br><span class="line">                seed = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> seed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/6d510435d4e0498f9bb6a91e4c9ff61d.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 67 二进制求和</title>
    <url>/2022/04/05/LeetCode-67-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E7%85%A7%E6%8A%84">照抄</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你两个二进制字符串，返回它们的和（用二进制表示）。
</font> 
<font color=#999AAA >
输入为 非空 字符串且只包含数字 1 和 0。
</font> 
<ul>
<li>示例 1:<br />
输入: a = “11”, b = “1”<br />
输出: “100”</li>
<li>示例 2:<br />
输入: a = “1010”, b = “1011”<br />
输出: “10101”</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/add-binary">https://leetcode-cn.com/problems/add-binary</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="照抄"><a class="markdownIt-Anchor" href="#照抄"></a> 照抄</h2>
<p>凹了几天，最后还是照抄了官方给的做法，即先把字符串反过来（reverse()s函数），然后再把最后得到的结果反过来。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">addBinary</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        string ans;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            carry += i &lt; a.<span class="built_in">size</span>() ? (a.<span class="built_in">at</span>(i) == <span class="string">&#x27;1&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">            carry += i &lt; b.<span class="built_in">size</span>() ? (b.<span class="built_in">at</span>(i) == <span class="string">&#x27;1&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>((carry % <span class="number">2</span>) ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            carry /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (carry) </span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/5105d7414e9b484388d28a964d733a66.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 66 加一</title>
    <url>/2022/04/05/LeetCode-66-%E5%8A%A0%E4%B8%80/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%BE%AA%E7%8E%AF%E8%BF%9B%E4%BD%8D">循环进位</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。
</font> 
<font color=#999AAA >
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
</font> 
<font color=#999AAA >
你可以假设除了整数 0 之外，这个整数不会以零开头。
</font> 
<p>示例 1：</p>
<p>输入：digits = [1,2,3]<br />
输出：[1,2,4]<br />
解释：输入数组表示数字 123。<br />
示例 2：</p>
<p>输入：digits = [4,3,2,1]<br />
输出：[4,3,2,2]<br />
解释：输入数组表示数字 4321。<br />
示例 3：</p>
<p>输入：digits = [0]<br />
输出：[1]</p>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/plus-one">https://leetcode-cn.com/problems/plus-one</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="循环进位"><a class="markdownIt-Anchor" href="#循环进位"></a> 循环进位</h2>
<p>从数组最后一位开始遍历，如果有进位的话则继续下一位加一，最后需要在循环结束时判断是否还有进位，有的话则需要重新申请内存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">plusOne</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = digits.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> end = len - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = end; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            digits[i] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (digits[i] &gt;= <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                carry = <span class="number">1</span>;</span><br><span class="line">                digits[i] = digits[i] % <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vtemp;</span><br><span class="line">            vtemp.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                vtemp.<span class="built_in">push_back</span>(digits[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> vtemp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/e7df2a129b68411fa582bec0b19b1a7b.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 58 最后一个单词的长度</title>
    <url>/2022/04/05/LeetCode-58-%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%9A%B4%E5%8A%9B%E9%81%8D%E5%8E%86">暴力遍历</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。
</font> 
<font color=#999AAA >
单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。
</font> 
<ul>
<li>示例 1：<br />
输入：s = “Hello World”<br />
输出：5<br />
解释：最后一个单词是“World”，长度为5。</li>
<li>示例 2：<br />
输入：s = &quot;   fly me   to   the moon  &quot;<br />
输出：4<br />
解释：最后一个单词是“moon”，长度为4。</li>
<li>示例 3：<br />
输入：s = “luffy is still joyboy”<br />
输出：6<br />
解释：最后一个单词是长度为6的“joyboy”。</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/length-of-last-word">https://leetcode-cn.com/problems/length-of-last-word</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="暴力遍历"><a class="markdownIt-Anchor" href="#暴力遍历"></a> 暴力遍历</h2>
<p>从最后一位开始找起，当该位上字符不为空格时，开始计数，等到找到边界时，返回找到的不为空格的字符数。这里的边界可能是字符串的开头，也有可能是字符串中间的某个位置，即该字符不为空格，而前一个字符为空格，即为边界。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLastWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count ++;</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> == <span class="number">-1</span> || s[i - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> count;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/4626a0f21a4d4004b64f278109f84268.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 53 最大子数组和</title>
    <url>/2022/04/05/LeetCode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
</font> 
<font color=#999AAA >
子数组 是数组中的一个连续部分。
</font> 
<ul>
<li>示例 1：<br />
输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br />
输出：6<br />
解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</li>
<li>示例 2：<br />
输入：nums = [1]<br />
输出：1</li>
<li>示例 3：<br />
输入：nums = [5,4,-1,7,8]<br />
输出：23</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/maximum-subarray">https://leetcode-cn.com/problems/maximum-subarray</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h2>
<p>从第一位开始，我们找以该元素为结尾的最大子数组和，然后找出所有这些子数组和中最大的即可。这个问题的关键就是要紧紧围绕这个元素展开，不论我们如何运算，比较的内容中一定要包含这个元素，因为现在的子目标是要找的是<strong>以该元素为结尾的最大子数组和</strong>，可以想到，可以比较前一子数组和加上当前元素与当前元素进行比较，取二者中较大的一个，公式如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(i)=max(f(i−1)+nums[i],nums[i])
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxSubSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            maxSubSum = <span class="built_in">max</span>(maxSubSum + nums[i], nums[i]);</span><br><span class="line">            res = <span class="built_in">max</span>(res, maxSubSum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/f48544a31b8f4647bfd81476eb0fc87e.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 35 搜索插入位置</title>
    <url>/2022/04/05/LeetCode-35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E4%BA%8C%E5%88%86%E6%B3%95">二分法</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
</font> 
<font color=#999AAA >
请必须使用时间复杂度为 O(log n) 的算法。
</font> 
<ul>
<li>示例 1:<br />
输入: nums = [1,3,5,6], target = 5<br />
输出: 2</li>
<li>示例 2:<br />
输入: nums = [1,3,5,6], target = 2<br />
输出: 1</li>
<li>示例 3:<br />
输入: nums = [1,3,5,6], target = 7<br />
输出: 4</li>
<li>示例 4:<br />
输入: nums = [1,3,5,6], target = 0<br />
输出: 0</li>
<li>示例 5:<br />
输入: nums = [1], target = 0<br />
输出: 0</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/search-insert-position">https://leetcode-cn.com/problems/search-insert-position</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="二分法"><a class="markdownIt-Anchor" href="#二分法"></a> 二分法</h2>
<p>直接使用二分法的话，查找到的条件是目标值和数组中元素相等；但是这里题目中描述的是数组中可能不存在与目标值相等的元素，此时的操作是返回插入该元素的位置，所以可以略微修改二分查找的条件：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>≤</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>&gt;</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">nums[right - 1] &lt; target \leq nums[right]\\
left &gt; right
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span></span></span></span></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = ((right - left) &gt;&gt; <span class="number">1</span>) + left;</span><br><span class="line">            <span class="keyword">if</span> (target &lt;= nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/5c34cef07cbe454d881c9888397ea254.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：数组二分，复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，也符合题目要求<br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 28 实现strStr()</title>
    <url>/2022/04/05/LeetCode-28-%E5%AE%9E%E7%8E%B0strStr/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%9A%B4%E5%8A%9B%E5%8C%B9%E9%85%8D">暴力匹配</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
实现 strStr() 函数。
</font> 
<font color=#999AAA >
给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。
</font> 
<font color=#999AAA >
说明：
</font> 
<font color=#999AAA >
当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。
</font> 
<font color=#999AAA >
对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。
</font> 
<ul>
<li>示例 1：<br />
输入：haystack = “hello”, needle = “ll”<br />
输出：2</li>
<li>示例 2：<br />
输入：haystack = “aaaaa”, needle = “bba”<br />
输出：-1</li>
<li>示例 3：<br />
输入：haystack = “”, needle = “”<br />
输出：0</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/implement-strstr">https://leetcode-cn.com/problems/implement-strstr</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="暴力匹配"><a class="markdownIt-Anchor" href="#暴力匹配"></a> 暴力匹配</h2>
<p>匹配的实质是找出长字符串中的短字符串部分，所以可以枚举所有长字符串中的长度为短字符串长度的子字符串与短字符串进行匹配，如果匹配结果合适，则返回首字符下标。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> lenHay = haystack.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> lenNeedle = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (lenNeedle == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenHay - lenNeedle + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; i + j &lt; lenHay &amp;&amp; j &lt; lenNeedle; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (haystack[i + j] != needle[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == lenNeedle - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/424b30b4772740d295f4c50a80d67ffe.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>×</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \times m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，极端情况下需要挨个对两个字符串进行匹配<br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 27 移除元素</title>
    <url>/2022/04/05/LeetCode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E8%A7%A3%E6%B3%95">快慢指针解法</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
</font> 
<font color=#999AAA >
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
</font> 
<font color=#999AAA >
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
</font> 
<ul>
<li>示例 1：<br />
输入：nums = [3,2,2,3], val = 3<br />
输出：2, nums = [2,2]<br />
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</li>
<li>示例 2：<br />
输入：nums = [0,1,2,2,3,0,4,2], val = 2<br />
输出：5, nums = [0,1,4,0,3]<br />
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/remove-element">https://leetcode-cn.com/problems/remove-element</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="快慢指针解法"><a class="markdownIt-Anchor" href="#快慢指针解法"></a> 快慢指针解法</h2>
<p>分别设定快慢指针，快指针进行数组的遍历，慢指针负责维护“不等于目标元素的元素的数组”。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> slowptr = <span class="number">-1</span>, quickptr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; quickptr &lt; len; quickptr++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[quickptr] != val)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[++slowptr] = nums[quickptr];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowptr + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/4c834f280a3545fe9dc9a45f5779603a.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>快慢指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 26 删除有序数组中的重复项</title>
    <url>/2022/04/05/LeetCode-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%80%9F%E5%8A%A9%E8%BE%85%E5%8A%A9%E7%A9%BA%E9%97%B4">借助辅助空间</a></li>
<li><a href="#%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E8%A7%A3%E6%B3%95">快慢指针解法</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。
</font> 
<font color=#999AAA >
由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。
</font> 
<font color=#999AAA >
将最终结果插入 nums 的前 k 个位置后返回 k 。
</font> 
<font color=#999AAA >
不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
</font> 
<ul>
<li>示例 1：<br />
输入：nums = [1,1,2]<br />
输出：2, nums = [1,2,_]<br />
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</li>
<li>示例 2：<br />
输入：nums = [0,0,1,1,1,2,2,3,3,4]<br />
输出：5, nums = [0,1,2,3,4]<br />
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="借助辅助空间"><a class="markdownIt-Anchor" href="#借助辅助空间"></a> 借助辅助空间</h2>
<p>对数组中元素遍历，当当前元素与前一个元素不等时，则判断其为新元素，加入到辅助数组空间中，直到遍历数组结束。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums = res;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/642a1ed90cec498f9351b2905aabc413.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度：申请了额外的数组空间，最大可能和原数组同样大<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<h2 id="快慢指针解法"><a class="markdownIt-Anchor" href="#快慢指针解法"></a> 快慢指针解法</h2>
<p>分别设定快慢指针，快指针进行数组的遍历，寻找“新元素”，而慢指针负责将不同的元素存储起来，即当快指针找到一个不同的元素时，将其覆盖掉慢指针指向元素的后一位，这样就相当于利用慢指针在维护一个无重复项的数组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> slowPtr = <span class="number">0</span>, quickPtr = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; quickPtr &lt; len; quickPtr++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[quickPtr] != nums[quickPtr<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                nums[++slowPtr] = nums[quickPtr];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowPtr + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/321f3940a5044a20abdd8c79480d81e0.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>快慢指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 21 合并两个有序链表</title>
    <url>/2022/04/05/LeetCode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E9%93%BE%E8%A1%A8%E9%A1%BA%E5%BA%8F%E6%9E%9A%E4%B8%BE">链表顺序枚举</a></li>
<li><a href="#%E9%80%92%E5%BD%92%E8%A7%A3%E6%B3%95">递归解法</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 
</font> 
<ul>
<li>示例 1：<br />
输入：l1 = [1,2,4], l2 = [1,3,4]<br />
输出：[1,1,2,3,4,4]</li>
<li>示例 2：<br />
输入：l1 = [], l2 = []<br />
输出：[]</li>
<li>示例 3：<br />
输入：l1 = [], l2 = [0]<br />
输出：[0]</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists">https://leetcode-cn.com/problems/merge-two-sorted-lists</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="链表顺序枚举"><a class="markdownIt-Anchor" href="#链表顺序枚举"></a> 链表顺序枚举</h2>
<p>按顺序对两链表的当前node进行数值的比对，符合条件者入新链表，并找该node的next继续进行这个比对操作，直到其中一个链表到头。此时将未遍历完的链接合到已有链上即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode* preHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* curr = preHead;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">nullptr</span> &amp;&amp; list2 != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                curr-&gt;next = list1;</span><br><span class="line">                list1 = list1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                curr-&gt;next = list2;</span><br><span class="line">                list2 = list2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curr-&gt; next = list1 == <span class="literal">nullptr</span> ? list2:list1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> preHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/54473df4dc834d8aa6d5db8b27be7a3b.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历两链表<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span><br />
空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<h2 id="递归解法"><a class="markdownIt-Anchor" href="#递归解法"></a> 递归解法</h2>
<p>递归的理解是，求两个链表的合并，即是每个节点后接上该节点的后续链和另外一条链的合并。递归终止条件是其中一条链为空，此时返回另外一条链。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (list2 == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            list1-&gt;next = <span class="built_in">mergeTwoLists</span>(list1-&gt;next, list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            list2-&gt;next = <span class="built_in">mergeTwoLists</span>(list1, list2-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/206ec42b1aed4076b61fb7397c69e982.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历两链表<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span><br />
空间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(min(n,m))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，需要用到函数堆栈，容量与两链表的长度相关，最小函数堆栈为两个链表中较短的那一条的大小，最大即需要一直将所有节点都遍历一遍，此时函数堆栈大小为n+m。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 20 有效的括号</title>
    <url>/2022/04/05/LeetCode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<p></p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。
</font>
<font color=#999AAA >
有效字符串需满足：
</font>
<font color=#999AAA >
左括号必须用相同类型的右括号闭合。
</font>
<font color=#999AAA >
左括号必须以正确的顺序闭合。
</font> 
<ul>
<li>示例 1：<br />
输入：s = “()”<br />
输出：true</li>
<li>示例 2：<br />
输入：s = “()[]{}”<br />
输出：true</li>
<li>示例 3：<br />
输入：s = “(]”<br />
输出：false</li>
<li>示例 4：<br />
输入：s = “([)]”<br />
输出：false</li>
<li>示例 5：<br />
输入：s = “{[]}”<br />
输出：true</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/valid-parentheses">https://leetcode-cn.com/problems/valid-parentheses</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<p>可以利用一个栈结构来进行括号的存储，即遍历字符串，在遇到左括号（不论是哪一个），都进栈处理，而一旦遇到右括号，就和栈顶进行比对，不匹配说明不符合要求，则返回false，匹配的话则进行出栈，再继续进行判断。</p>
<p>值得注意的是这里的第二的条件“左括号必须以正确的顺序闭合”，即当遍历遇到右括号时，此时栈顶必须得是相应左括号才行，否则就不可能是以正确得顺序闭合。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;&#123;&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sta.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sta.<span class="built_in">empty</span>() || !<span class="built_in">isParaMatch</span>(sta.<span class="built_in">top</span>(), s[i])) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sta.<span class="built_in">empty</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isParaMatch</span><span class="params">(<span class="type">char</span> l, <span class="type">char</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> r == <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> r == <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> r == <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2840a078c7a54fa69b822586adb95020.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历数组及字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，即栈的可能最大长度</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 14 最长公共前缀</title>
    <url>/2022/04/05/LeetCode-14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<p></p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
编写一个函数来查找字符串数组中的最长公共前缀。
</font>
<font color=#999AAA >
如果不存在公共前缀，返回空字符串 ""。
</font>
<ul>
<li>示例 1：<br />
输入：strs = [“flower”,“flow”,“flight”]<br />
输出：“fl”</li>
<li>示例 2：<br />
输入：strs = [“dog”,“racecar”,“car”]<br />
输出：&quot;&quot;<br />
解释：输入不存在公共前缀。</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix">https://leetcode-cn.com/problems/longest-common-prefix</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<p>可以实现一个方法在两个字符串间寻找最长公共前缀，即按位比较，直到不一致时跳出，即可得到最长公共前缀。然后用这个得到的串再和数组内其他的字符串求最长公共前缀，直到遍历数组结束。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string res = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; strs.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">getCommonPrefix</span>(res, strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">getCommonPrefix</span><span class="params">(string str00, string str01)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> len00 = str00.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len01 = str01.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len = len00 &lt;= len01 ? len00 : len01;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str00[i] == str01[i])</span><br><span class="line">            &#123;</span><br><span class="line">                res += str00[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/91d589b02e9d4f44a61d3e3f4ea709ac.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历数组及字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，m表示单个字符串长度，n表示数组大小<br />
空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，借助了临时字符串作存储</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 13 罗马数字转整数</title>
    <url>/2022/04/05/LeetCode-13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<p></p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
</font>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">数值</th>
</tr>
</thead>
<tbody>
<tr>
<td>I</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td>V</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>X</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td>L</td>
<td style="text-align:center">50</td>
</tr>
<tr>
<td>C</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td>D</td>
<td style="text-align:center">500</td>
</tr>
<tr>
<td>M</td>
<td style="text-align:center">1000</td>
</tr>
</tbody>
</table>
  <font color=#999AAA >
  例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
  </font>
<font color=#999AAA >
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
</font>
<font color=#999AAA >
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
</font>
<font color=#999AAA >
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
</font>
<font color=#999AAA >
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
</font>
<font color=#999AAA >
给定一个罗马数字，将其转换成整数。
</font>
<ul>
<li>示例 1:<br />
输入: s = “III”<br />
输出: 3</li>
<li>示例 2:<br />
输入: s = “IV”<br />
输出: 4</li>
<li>示例 3:<br />
输入: s = “IX”<br />
输出: 9</li>
<li>示例 4:<br />
输入: s = “LVIII”<br />
输出: 58<br />
解释: L = 50, V= 5, III = 3.</li>
<li>示例 5:<br />
输入: s = “MCMXCIV”<br />
输出: 1994<br />
解释: M = 1000, CM = 900, XC = 90, IV = 4.</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/roman-to-integer">https://leetcode-cn.com/problems/roman-to-integer</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<p>除了特殊情况以外（4，9，40，90等），这里的核心其实就是累加，如VII，就是5+1+1 = 7，即可以通过遍历字符串来将每个字符对应的值找到并累加。其实可以将特殊情况也用这样的方法的看，比如IV，就是在找到字符对应的值的时候，与后一位（如果存在的话）的对应的值进行比较，如果小于的话，那么就可以将该位上的值取反，即-1 + 5 = 4。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = <span class="built_in">getSingleInt</span>(s[i]);</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span> &lt; len &amp;&amp; temp &lt; <span class="built_in">getSingleInt</span>(s[i+<span class="number">1</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                temp = <span class="number">0</span> - temp;</span><br><span class="line">            &#125;</span><br><span class="line">            res += temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSingleInt</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/6e92fbab0fe049ce90a949a95723c496.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 9 回文数</title>
    <url>/2022/04/05/LeetCode-9-%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95">暴力解法</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。
</font>
<font color=#999AAA >
回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。
</font>
<ul>
<li>示例 1：<br />
输入：x = 121<br />
输出：true</li>
<li>示例 2：<br />
输入：x = -121<br />
输出：false<br />
解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</li>
<li>示例 3：<br />
输入：x = 10<br />
输出：false<br />
解释：从右向左读, 为 01 。因此它不是一个回文数。</li>
<li>示例 4：<br />
输入：x = -101<br />
输出：false</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/palindrome-number">https://leetcode-cn.com/problems/palindrome-number</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="暴力解法"><a class="markdownIt-Anchor" href="#暴力解法"></a> 暴力解法</h2>
<p>将各位上的数字依次输出，然后按照顺序进行比对。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arrPalindrome;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x%<span class="number">10</span> != <span class="number">0</span> || x/<span class="number">10</span> != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = x%<span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">            arrPalindrome.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = arrPalindrome.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arrPalindrome[i] != arrPalindrome[len <span class="number">-1</span> - i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/abb8239a33f54bd7875a5f50b3dfc52c.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn + \frac{1}{2}logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
空间复杂度：开辟辅助数组所出现的消耗，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1 两数之和</title>
    <url>/2022/04/04/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE">暴力枚举</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E4%BC%98%E5%8C%96%E5%81%9A%E6%B3%95">基于哈希表的优化做法</a></li>
</ul>
</p>
<span id="more"></span>
<h1 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 题目要求</h1>
<font color=#999AAA >
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target  的那两个整数，并返回它们的数组下标。
</font>
<font color=#999AAA >
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。
</font>
<ul>
<li>
<p>示例 1：<br />
输入：nums = [2,7,11,15], target = 9<br />
输出：[0,1]<br />
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p>
</li>
<li>
<p>示例 2：<br />
输入：nums = [3,2,4], target = 6<br />
输出：[1,2]</p>
</li>
<li>
<p>示例 3：<br />
输入：nums = [3,3], target = 6<br />
输出：[0,1]</p>
</li>
</ul>
<p>来源：力扣（LeetCode）<br />
链接：<a href="https://leetcode-cn.com/problems/two-sum">https://leetcode-cn.com/problems/two-sum</a><br />
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">
<h1 id="解法"><a class="markdownIt-Anchor" href="#解法"></a> 解法</h1>
<h2 id="暴力枚举"><a class="markdownIt-Anchor" href="#暴力枚举"></a> 暴力枚举</h2>
<p>按照下标从小往大的顺序，将数组中任意两数两两组合，以枚举出所有的可能性，从而检查两数字之和是否与目标值相等。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/50fc18cd45ff4f3ba2a3ac31c487e401.png" alt="在这里插入图片描述" /><br />
复杂度分析<br />
时间复杂度：最坏情况下（符合要求两数字的下标位于数组的末尾），<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />
空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<h2 id="基于哈希表的优化做法"><a class="markdownIt-Anchor" href="#基于哈希表的优化做法"></a> 基于哈希表的优化做法</h2>
<p>利用哈希表的特性（查找快速），在遍历数组的同时，检查每个元素达成目标值所需要的另一元素是否存在于哈希表中，从而实现在遍历一遍数组的前提下，就能够找出符合要求的两个数组元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; hashMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            unordered_map &lt;<span class="type">int</span>, <span class="type">int</span>&gt;::const_iterator iter = hashMap.<span class="built_in">find</span>(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (iter != hashMap.<span class="built_in">end</span>()) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i, iter-&gt;second&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashMap[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/1e538207d91a4d198ab33ad1e016203f.png" alt="在这里插入图片描述" /></p>
<p>复杂度分析<br />
时间复杂度：遍历数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，对每个元素需要以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的代价来判断是否存在另一个元素<br />
空间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，主要是用来开辟哈希表空间</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">]]></content>
      <categories>
        <category>LeetCode</category>
        <category>easy</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>第六章 纹理的处理（Texturing）</title>
    <url>/2022/03/30/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E7%BA%B9%E7%90%86%E7%9A%84%E5%A4%84%E7%90%86%EF%BC%88Texturing%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章 着色基础（Shading Basics）</title>
    <url>/2022/03/30/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%9D%80%E8%89%B2%E5%9F%BA%E7%A1%80%EF%BC%88Shading-Basics%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章 变换（Transforms）</title>
    <url>/2022/03/30/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%8F%98%E6%8D%A2%EF%BC%88Transforms%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 图形处理单元（The Graphics Processing Unit）</title>
    <url>/2022/03/30/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86%E5%8D%95%E5%85%83%EF%BC%88The-Graphics-Processing-Unit%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 图形渲染管线（The Graphics Rendering Pipeline）</title>
    <url>/2022/03/30/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%EF%BC%88The-Graphics-Rendering-Pipeline%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 介绍（Introduction）</title>
    <url>/2022/03/30/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BB%8B%E7%BB%8D%EF%BC%88Introduction%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>渲染</category>
        <category>Real-Time Rendering 4th Edition 读书与翻译</category>
      </categories>
      <tags>
        <tag>渲染管线</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>快速建站方案（hexo + next）全面记录</title>
    <url>/2022/03/23/%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E5%85%A8%E9%9D%A2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<p>本文记录了笔者在搭建 <a href="https://claude-jhin.github.io">个人博客网站</a> 时所经历的过程，包含整个流程和中间遇到的一些麻烦。<br />
这里记录下来，作为自己一个阶段对网站开发学习的总结，并且如果能够帮助或者启发更多的人，也将不胜荣幸。<br />
当然，笔者并不是专业的前端开发人员，前端开发只是作为工具而去粗浅的使用，所以在一些细节上难以尽善尽美。</p>
<span id="more"></span>
<p>本文仅是对工具浮于表面的粗浅使用，更多的信息还是请参考备注的各种官方链接。</p>
<h3 id="hexo简介"><a class="markdownIt-Anchor" href="#hexo简介"></a> Hexo简介</h3>
<p>依据 <a href="https://hexo.io/zh-cn">Hexo中文官网</a> 中的介绍，Hexo是一个快速、简洁且高效的博客框架。<br />
最直观的，在这套框架的帮助下，我们可以很快的通过markdown来完成一篇又一篇博客的编辑。<br />
此外，Hexo也是可扩展的，在各种各样插件的帮助下，可以实现多种多样的前端效果。</p>
<h3 id="next简介"><a class="markdownIt-Anchor" href="#next简介"></a> next简介</h3>
<p>next是Hexo丰富多彩的主题中比较受欢迎的一个，其本身是一个 <a href="https://github.com/next-theme/hexo-theme-next">开源的项目</a> 到现在一直在不断得推出新的版本。</p>
<p>如果说Hexo是对前端开发的简化和封装，那么next就是对hexo框架允许内的前端效果的封装。<br />
在这两者的帮助下，降低了开发难度，让使用者可以仅仅通过简单的配置就可以拥有和维护属于自己的博客网站。</p>
<h2 id="本地基础开发环境准备"><a class="markdownIt-Anchor" href="#本地基础开发环境准备"></a> 本地基础开发环境准备</h2>
<ul>
<li><a href="https://nodejs.org/">Node.js</a></li>
</ul>
<p>下载后依据导航安装即可，推荐下载长期支持版（LTS）。</p>
<ul>
<li><a href="https://git-scm.com/">Git</a></li>
</ul>
<p>下载后依据导航安装即可，Git安装过程中会有很多的配置选项，如果有特定需求的话（了解其各个配置选项的含义）可以按需配置，否则就按照推荐选项进行安装即可。</p>
<p>安装完成后，右键的下拉菜单中就会出现Git相关的功能选项。</p>
<p><img src="%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E5%85%A8%E9%9D%A2%E8%AE%B0%E5%BD%95_rightclick.png" alt="" /></p>
<h2 id="hexo环境搭建"><a class="markdownIt-Anchor" href="#hexo环境搭建"></a> hexo环境搭建</h2>
<p>在基本环境准备完成后，即可开始hexo相关的下载和安装。</p>
<p>在预先准备好的文件夹下（如 E:/Blog/），右键打开下拉菜单，点击Git Bash Here，输入下面的命令后点击回车键：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>如图：</p>
<p><img src="%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E5%85%A8%E9%9D%A2%E8%AE%B0%E5%BD%95_gitbush.png" alt="" /></p>
<p>完成后，再执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>完成后，对应文件夹中出现内容，目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p>以上各文件各有作用，和我们博客最后的表现息息相关，在具体配置和使用时我们再做详细介绍。</p>
<p>最后执行以下命令完成配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>在等待上述命令执行完成后，可以在命令行键入以下命令启动hexo服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>此时，本地服务启动成功，可以在浏览器中键入<code>http://localhost:4000/</code> 来尝试访问默认的博客模板，<br />
出现以下页面即表示着前面的安装过程没有出现问题：</p>
<p><img src="%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E5%85%A8%E9%9D%A2%E8%AE%B0%E5%BD%95_defaultpage.png" alt="" /></p>
<h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2>
<p>在文件夹中找到 <code>_config.yml</code> 文件，该文件即是博客的主要配置文件，其中包含了绝大部分关于网站的我们可以自定义的部分。</p>
<p>预想要完成博客的个性化定制，需要对该文件各个部分的配置内容有个大概的了解。这里罗列一些核心部分，剩余部分的配置建议参考 <a href="https://hexo.io/zh-cn/docs/configuration">官方网站的内容</a> 。</p>
<p>当然，如果对美观和个性化没有需求的话，这一小节可以暂时先掠过，先进行后面的阅读。</p>
<h3 id="site"><a class="markdownIt-Anchor" href="#site"></a> Site</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: </span><br><span class="line">subtitle: </span><br><span class="line">description: </span><br><span class="line">keywords: </span><br><span class="line">author: </span><br><span class="line">language: </span><br><span class="line">timezone: </span><br></pre></td></tr></table></figure>
<p>这里是网站的一些主要属性的配置，其中各项代表的含义为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">网站标题</td>
</tr>
<tr>
<td style="text-align:center">subtitle</td>
<td style="text-align:center">网站副标题</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">网站描述</td>
</tr>
<tr>
<td style="text-align:center">keywords</td>
<td style="text-align:center">网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td style="text-align:center">author</td>
<td style="text-align:center">您的名字</td>
</tr>
<tr>
<td style="text-align:center">language</td>
<td style="text-align:center">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td>
</tr>
<tr>
<td style="text-align:center">timezone</td>
<td style="text-align:center">网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td>
</tr>
</tbody>
</table>
<h3 id="url"><a class="markdownIt-Anchor" href="#url"></a> URL</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://claude-jhin.github.io/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure>
<p>这里是关于网站url的一些配置相关的内容，主要作用是对url进行美化。</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">url</td>
<td style="text-align:center">后键入自己准备好的域名，我这里使用的是github提供的免费域名。</td>
</tr>
<tr>
<td style="text-align:center">permalink</td>
<td style="text-align:center">表示的是每一个我们编辑的markdown博客文件应该是以什么样子的域名来显示的，默认是以年+月+日+文章名字的形式。</td>
</tr>
<tr>
<td style="text-align:center">permalink_defaults</td>
<td style="text-align:center">是对permalink给出一个默认值。</td>
</tr>
<tr>
<td style="text-align:center">trailing_index</td>
<td style="text-align:center">是否为博客文件保留<code>index.html</code> 的后缀</td>
</tr>
<tr>
<td style="text-align:center">trailing_html</td>
<td style="text-align:center">是否为博客文件保留<code>.html</code> 的后缀</td>
</tr>
</tbody>
</table>
<h3 id="home-page-setting"><a class="markdownIt-Anchor" href="#home-page-setting"></a> Home page setting</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &#x27;&#x27;) 博客索引页的根目录</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination) 每一页显示的文章数量</span><br><span class="line"># order_by: Posts order. (Order by date descending by default) 文章的排序方式</span><br><span class="line">index_generator:</span><br><span class="line">path: &#x27;&#x27;</span><br><span class="line">per_page: 10</span><br><span class="line">order_by: -date</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">path</td>
<td style="text-align:center">博客索引页的根目录</td>
</tr>
<tr>
<td style="text-align:center">per_page</td>
<td style="text-align:center">每一页显示的文章数量</td>
</tr>
<tr>
<td style="text-align:center">order_by</td>
<td style="text-align:center">文章的排序方式</td>
</tr>
</tbody>
</table>
<h3 id="extension"><a class="markdownIt-Anchor" href="#extension"></a> Extension</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">theme</td>
<td style="text-align:center">所选择的主题，主题下载后保存在根目录的themes文件夹下，通过这里指定加载的主题。</td>
</tr>
</tbody>
</table>
<h2 id="写作"><a class="markdownIt-Anchor" href="#写作"></a> 写作</h2>
<h3 id="创建文章"><a class="markdownIt-Anchor" href="#创建文章"></a> 创建文章</h3>
<p>新建文章的指令为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>其中 [layout] 默认有：</p>
<table>
<thead>
<tr>
<th style="text-align:center">布局</th>
<th style="text-align:center">路径</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">post</td>
<td style="text-align:center">source/_posts</td>
</tr>
<tr>
<td style="text-align:center">page</td>
<td style="text-align:center">source</td>
</tr>
<tr>
<td style="text-align:center">draft</td>
<td style="text-align:center">source/_drafts</td>
</tr>
</tbody>
</table>
<p>在创建这三种不同类型的文件时，它们将会被保存到不同的路径。但是默认来说我们基本只需要用到post，即：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new post &quot;文章名字&quot;</span><br></pre></td></tr></table></figure>
<p>执行上面命令后，在source/_posts文件夹下就会生成对应的md文件，按照md格式进行文档的编辑即可。</p>
<p>截取本文的编辑界面如下：</p>
<p><img src="%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E5%85%A8%E9%9D%A2%E8%AE%B0%E5%BD%95_content.png" alt="" /></p>
<h3 id="配置文章属性front-matter"><a class="markdownIt-Anchor" href="#配置文章属性front-matter"></a> 配置文章属性（Front-matter）</h3>
<p>与博客一样，每篇文章除了内容以外，还有自己的属性，如建立时间、更行时间、分类和标签等。</p>
<p>博客模板会利用这些属性来自动实现一些高级的功能，如显示博客文章时间戳，按照分类来讲文章进行归档等。<br />
post模板会自动帮助我们创建出title，date和tags，此外还有一些其他内容，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">文件建立日期</td>
</tr>
<tr>
<td style="text-align:center">updated</td>
<td style="text-align:center">更新日期	文件更新日期</td>
</tr>
<tr>
<td style="text-align:center">comments</td>
<td style="text-align:center">开启文章的评论功能（true/false）</td>
</tr>
<tr>
<td style="text-align:center">tags</td>
<td style="text-align:center">标签（不适用于分页）</td>
</tr>
<tr>
<td style="text-align:center">categories</td>
<td style="text-align:center">分类（不适用于分页）</td>
</tr>
</tbody>
</table>
<p>如本文的Front-matter：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 快速建站方案（hexo + next）全面记录</span><br><span class="line">date: 2022-03-23 21:35:53</span><br><span class="line">updated: 2022-03-24 20:00:00</span><br><span class="line">comments: true</span><br><span class="line">tags:</span><br><span class="line">  - 前端</span><br><span class="line">categories: </span><br><span class="line">  - hexo</span><br></pre></td></tr></table></figure>
<h2 id="next主题"><a class="markdownIt-Anchor" href="#next主题"></a> next主题</h2>
<h3 id="主题下载与加载"><a class="markdownIt-Anchor" href="#主题下载与加载"></a> 主题下载与加载</h3>
<p>在hexoblog文件夹下打开命令行，键入并执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>等待完成后，有：</p>
<p><img src="%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E5%85%A8%E9%9D%A2%E8%AE%B0%E5%BD%95_nextexplorer.png" alt="" /></p>
<p>在hexoblog下的_config.yml里配置theme即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h3 id="预览"><a class="markdownIt-Anchor" href="#预览"></a> 预览</h3>
<p>在hexoblog文件夹下打开命令行，键入并执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>有：</p>
<p>![](快速建站全面记录_hexo s.png)</p>
<p>此时就可以在浏览器中用 <code>http://localhost:4000/</code> 的地址来进行访问了。</p>
<p><img src="%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E5%85%A8%E9%9D%A2%E8%AE%B0%E5%BD%95_localhost.png" alt="" /></p>
<p>但是注意，此时我们只是开启了一个本地服务，就是说，只能在我们开启服务时，在本地机器上进行访问，还没有发布到网络上供别人来查看。</p>
<h2 id="github-page准备"><a class="markdownIt-Anchor" href="#github-page准备"></a> github page准备</h2>
<p>在github上新建一个仓库，进入到 <code>General/Code and automation/Pages</code> 配置界面：</p>
<p><img src="%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E5%85%A8%E9%9D%A2%E8%AE%B0%E5%BD%95_githubpage.png" alt="" /></p>
<p>这里顺便需要去设置界面把SSH给配置了，方便后续的更新和维护，<a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh">具体操作</a> ，这里不做过多赘述。</p>
<p>下面就是把之前做的内容推送到远程仓库里。</p>
<h2 id="发布"><a class="markdownIt-Anchor" href="#发布"></a> 发布</h2>
<p>回到hexoblog文件夹下的_config.yml，将远程仓库相关内容键入（注意这里使用的是SSH地址）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:Github用户名/Github用户名全小写.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<p>在hexoblog打开命令行，键入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>生成静态页面内容后，再键入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>如果是第一次的话，可能过程中还要填写github的用户名和密码，按导航完成即可。</p>
<p>等待完成后，过一段时间（取决于github的处理），访问仓库地址（如<code>https://claude-jhin.github.io/</code> ），可以看到本地仓库已经发布到了网页。</p>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<p>到此，基本上完成了从零开始的一个博客搭建，当然对于有心人来讲，事情远远还没有完成。<br />
一篇篇博客的积累，一点点前端特性的尝试与引入，学习的乐趣，开发的乐趣，远不止于此。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>frontend</tag>
      </tags>
  </entry>
</search>
